{
  HashMap<String,String> headers=new HashMap<>();
  HttpClientBuilder httpClientBuilder=new GoAgentServerHttpClientBuilder(rootCertFile,sslVerificationMode).httpClientBuilder(HttpClients.custom());
  request.setConfig(RequestConfig.custom().setConnectTimeout(HTTP_TIMEOUT_IN_MILLISECONDS).build());
  try (CloseableHttpClient httpClient=httpClientBuilder.build();final CloseableHttpResponse response=httpClient.execute(request);StringWriter sw=new StringWriter();PrintWriter out=new PrintWriter(sw)){
    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
      out.println("Return Code: " + response.getStatusLine().getStatusCode());
      out.println("Few Possible Causes: ");
      out.println("1. Your Go Server is down or not accessible.");
      out.println("2. This agent might be incompatible with your Go Server.Please fix the version mismatch between Go Server and Go Agent.");
      throw new Exception(sw.toString());
    }
    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
      throw new Exception("Got status " + response.getStatusLine().getStatusCode() + " "+ response.getStatusLine()+ " from server");
    }
    for (    Header header : response.getAllHeaders()) {
      headers.put(header.getName(),header.getValue());
    }
    try (InputStream content=response.getEntity() != null ? response.getEntity().getContent() : null){
      return new ServerResponseWrapper(headers,content);
    }
   }
 catch (  Exception e) {
    String message="Couldn't access Go Server with base url: " + request.getURI() + ": "+ e.toString();
    LOG.error(message);
    throw new Exception(message,e);
  }
}
