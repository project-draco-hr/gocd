{
  systemEnvironment=new SystemEnvironment();
  configHelper=new GoConfigFileHelper();
  configHelper.onSetUp();
  configRepository=new ConfigRepository(systemEnvironment);
  configRepository.initialize();
  timeProvider=mock(TimeProvider.class);
  when(timeProvider.currentTime()).thenReturn(new Date());
  ServerVersion serverVersion=new ServerVersion();
  ConfigElementImplementationRegistry registry=ConfigElementImplementationRegistryMother.withNoPlugins();
  ServerHealthService serverHealthService=new ServerHealthService();
  cachedGoPartials=new CachedGoPartials(serverHealthService);
  dataSource=new GoFileConfigDataSource(new GoConfigMigration(new GoConfigMigration.UpgradeFailedHandler(){
    public void handle(    Exception e){
      throw new RuntimeException(e);
    }
  }
,configRepository,new TimeProvider(),configCache,registry),configRepository,systemEnvironment,timeProvider,configCache,serverVersion,registry,mock(ServerHealthService.class),cachedGoPartials);
  dataSource.upgradeIfNecessary();
  CachedGoConfig cachedGoConfig=new CachedGoConfig(serverHealthService,dataSource,mock(CachedGoPartials.class));
  cachedGoConfig.loadConfigIfNull();
  goConfigDao=new GoConfigDao(cachedGoConfig);
  configHelper.load();
  configHelper.usingCruiseConfigDao(goConfigDao);
  GoConfigWatchList configWatchList=new GoConfigWatchList(cachedGoConfig);
  ConfigElementImplementationRegistry configElementImplementationRegistry=new ConfigElementImplementationRegistry(new NoPluginsInstalled());
  GoConfigPluginService configPluginService=new GoConfigPluginService(mock(ConfigRepoExtension.class),new ConfigCache(),configElementImplementationRegistry,cachedGoConfig);
  repoConfig=new ConfigRepoConfig(new GitMaterialConfig("url"),"plugin");
  configHelper.addConfigRepo(repoConfig);
}
