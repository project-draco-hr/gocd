{
  int size=levels.size() - 1;
  if (cur == null) {
    cur=new XmlsStackElement();
    cur.level=currentLevel;
    lastlevel=currentLevel;
    levels.add(cur);
  }
  boolean parentRendered=false;
  XmlsStackElement e=null;
  if (size == -1) {
    parentRendered=true;
  }
 else {
    e=levels.get(size);
    if (e.rendered && e.level + 1 == currentLevel) {
      parentRendered=true;
    }
  }
  if (parentRendered) {
    col.addAll(cur.nodes);
    cur.rendered=true;
    return;
  }
  Map<String,Attr> loa=new HashMap<String,Attr>();
  List<Attr> baseAttrs=new ArrayList<Attr>();
  boolean successiveOmitted=true;
  for (; size >= 0; size--) {
    e=levels.get(size);
    if (e.rendered) {
      successiveOmitted=false;
    }
    Iterator<Attr> it=e.nodes.iterator();
    while (it.hasNext() && successiveOmitted) {
      Attr n=it.next();
      if (n.getLocalName().equals("base") && !e.rendered) {
        baseAttrs.add(n);
      }
 else       if (!loa.containsKey(n.getName())) {
        loa.put(n.getName(),n);
      }
    }
  }
  if (!baseAttrs.isEmpty()) {
    Iterator<Attr> it=col.iterator();
    String base=null;
    Attr baseAttr=null;
    while (it.hasNext()) {
      Attr n=it.next();
      if (n.getLocalName().equals("base")) {
        base=n.getValue();
        baseAttr=n;
        break;
      }
    }
    it=baseAttrs.iterator();
    while (it.hasNext()) {
      Attr n=it.next();
      if (base == null) {
        base=n.getValue();
        baseAttr=n;
      }
 else {
        try {
          base=joinURI(n.getValue(),base);
        }
 catch (        URISyntaxException e1) {
          throw new CanonicalizationException(e1);
        }
      }
    }
    if (base != null && base.length() != 0) {
      baseAttr.setValue(base);
      col.add(baseAttr);
    }
  }
  cur.rendered=true;
  col.addAll(loa.values());
}
