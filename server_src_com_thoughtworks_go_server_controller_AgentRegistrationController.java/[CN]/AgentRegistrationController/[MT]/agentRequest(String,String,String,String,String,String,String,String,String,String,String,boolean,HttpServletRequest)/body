{
  final String ipAddress=request.getRemoteAddr();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Processing registration request from agent [{}/{}]",hostname,ipAddress);
  }
  Registration keyEntry;
  String preferredHostname=hostname;
  try {
    if (goConfigService.serverConfig().shouldAutoRegisterAgentWith(agentAutoRegisterKey)) {
      preferredHostname=getPreferredHostname(agentAutoRegisterHostname,hostname);
      LOG.info("[Agent Auto Registration] Auto registering agent with uuid {} ",uuid);
    }
 else {
      if (elasticAgentAutoregistrationInfoPresent(elasticAgentId,elasticPluginId)) {
        throw new RuntimeException(String.format("Elastic agent registration requires an auto-register agent key to be setup on the server. Agent-id: [%s], Plugin-id: [%s]",elasticAgentId,elasticPluginId));
      }
    }
    AgentConfig agentConfig=new AgentConfig(uuid,preferredHostname,ipAddress);
    if (partialElasticAgentAutoregistrationInfo(elasticAgentId,elasticPluginId)) {
      throw new RuntimeException("Elastic agents must submit both elasticAgentId and elasticPluginId");
    }
    if (elasticAgentAutoregistrationInfoPresent(elasticAgentId,elasticPluginId)) {
      agentConfig.setElasticAgentId(elasticAgentId);
      agentConfig.setElasticPluginId(elasticPluginId);
    }
    if (goConfigService.serverConfig().shouldAutoRegisterAgentWith(agentAutoRegisterKey)) {
      LOG.info(String.format("[Agent Auto Registration] Auto registering agent with uuid %s ",uuid));
      GoConfigDao.CompositeConfigCommand compositeConfigCommand=new GoConfigDao.CompositeConfigCommand(new AgentConfigService.AddAgentCommand(agentConfig),new UpdateResourceCommand(uuid,agentAutoRegisterResources),new UpdateEnvironmentsCommand(uuid,agentAutoRegisterEnvironments));
      HttpOperationResult result=new HttpOperationResult();
      agentConfig=agentConfigService.updateAgent(compositeConfigCommand,uuid,result,agentService.agentUsername(uuid,ipAddress,preferredHostname));
      if (!result.isSuccess()) {
        List<ConfigErrors> errors=com.thoughtworks.go.config.ErrorCollector.getAllErrors(agentConfig);
        throw new GoConfigInvalidException(null,new AllConfigErrors(errors).asString());
      }
    }
    boolean registeredAlready=goConfigService.hasAgent(uuid);
    long usablespace=Long.parseLong(usablespaceAsString);
    AgentRuntimeInfo agentRuntimeInfo=AgentRuntimeInfo.fromServer(agentConfig,registeredAlready,location,usablespace,operatingSystem,supportsBuildCommandProtocol);
    if (elasticAgentAutoregistrationInfoPresent(elasticAgentId,elasticPluginId)) {
      agentRuntimeInfo=ElasticAgentRuntimeInfo.fromServer(agentRuntimeInfo,elasticAgentId,elasticPluginId);
    }
    keyEntry=agentService.requestRegistration(agentService.agentUsername(uuid,ipAddress,preferredHostname),agentRuntimeInfo);
  }
 catch (  Exception e) {
    keyEntry=Registration.createNullPrivateKeyEntry();
    LOG.error("Error occured during agent registration process: ",e);
  }
  final Registration anotherCopy=keyEntry;
  return new ModelAndView(new View(){
    public String getContentType(){
      return "application/json";
    }
    public void render(    Map model,    HttpServletRequest request,    HttpServletResponse response) throws IOException {
      ServletOutputStream servletOutputStream=null;
      try {
        servletOutputStream=response.getOutputStream();
        servletOutputStream.print(anotherCopy.toJson());
      }
  finally {
        IOUtils.closeQuietly(servletOutputStream);
      }
    }
  }
);
}
