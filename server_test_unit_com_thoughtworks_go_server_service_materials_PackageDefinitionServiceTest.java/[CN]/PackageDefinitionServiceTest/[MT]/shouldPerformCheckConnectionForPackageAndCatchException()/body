{
  Configuration configuration=new Configuration();
  configuration.add(ConfigurationPropertyMother.create("required",false,""));
  configuration.add(ConfigurationPropertyMother.create("required_secure",true,""));
  configuration.add(ConfigurationPropertyMother.create("secure",true,""));
  configuration.add(ConfigurationPropertyMother.create("not_required_not_secure",false,""));
  configuration.add(ConfigurationPropertyMother.create("spec",false,"xyz?"));
  PackageDefinition packageDefinition=PackageDefinitionMother.create("1","name",configuration,packageRepository);
  HttpLocalizedOperationResult result=new HttpLocalizedOperationResult();
  PackageMaterialProvider packageMaterialProvider=mock(PackageMaterialProvider.class);
  PluginManager pluginManager=dummyPluginManager(packageMaterialProvider);
  PackageDefinitionService service=new PackageDefinitionService(pluginManager,localizer);
  PackageMaterialPoller poller=mock(PackageMaterialPoller.class);
  when(packageMaterialProvider.getPoller()).thenReturn(poller);
  ArgumentCaptor<com.thoughtworks.go.plugin.api.material.packagerepository.PackageConfiguration> packageConfigurationsCaptor=new ArgumentCaptor<com.thoughtworks.go.plugin.api.material.packagerepository.PackageConfiguration>();
  ArgumentCaptor<RepositoryConfiguration> packageRepositoryConfigurationsCaptor=new ArgumentCaptor<RepositoryConfiguration>();
  when(poller.checkConnectionToPackage(packageConfigurationsCaptor.capture(),packageRepositoryConfigurationsCaptor.capture())).thenThrow(new RuntimeException("Check connection for package not implemented!!"));
  service.checkConnection(packageDefinition,result);
  assertThat(result.isSuccessful(),Is.is(false));
  when(localizer.localize("PACKAGE_CHECK_FAILED","Check connection for package not implemented!!")).thenReturn("error_msg");
  assertThat(result.message(localizer),Is.is("error_msg"));
  verify(poller).checkConnectionToPackage(any(com.thoughtworks.go.plugin.api.material.packagerepository.PackageConfiguration.class),any(RepositoryConfiguration.class));
}
