{
  SCMConfiguration scmConfig=new SCMConfiguration(new SCMProperty("KEY2").with(Property.REQUIRED,true).with(Property.SECURE,true));
  scmConfigurations.add(scmConfig);
  Configuration configuration=new Configuration(ConfigurationPropertyMother.create("KEY1"),ConfigurationPropertyMother.create("KEY2",true,""));
  SCM modifiedSCM=new SCM("scm-id",new PluginConfiguration(pluginId,"1"),configuration);
  ValidationResult validationResult=new ValidationResult();
  when(scmExtension.isSCMConfigurationValid(eq(modifiedSCM.getPluginConfiguration().getId()),any(SCMPropertyConfiguration.class))).thenReturn(validationResult);
  when(localizer.localize("MANDATORY_CONFIGURATION_FIELD")).thenReturn("MANDATORY_CONFIGURATION_FIELD");
  pluggableScmService.validate(modifiedSCM);
  final List<ValidationError> validationErrors=validationResult.getErrors();
  assertFalse(validationErrors.isEmpty());
  final ValidationError validationErrorForKey1=getValidationErrorFor(validationErrors,"KEY1");
  assertNotNull(validationErrorForKey1);
  assertThat(validationErrorForKey1.getMessage(),is("MANDATORY_CONFIGURATION_FIELD"));
  final ValidationError validationErrorForKey2=getValidationErrorFor(validationErrors,"KEY2");
  assertNotNull(validationErrorForKey2);
  assertThat(validationErrorForKey2.getMessage(),is("MANDATORY_CONFIGURATION_FIELD"));
}
