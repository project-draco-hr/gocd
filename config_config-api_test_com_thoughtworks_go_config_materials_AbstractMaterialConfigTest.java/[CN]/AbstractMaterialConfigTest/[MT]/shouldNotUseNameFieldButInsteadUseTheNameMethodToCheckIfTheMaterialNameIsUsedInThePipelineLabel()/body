{
  PipelineConfig pipelineConfig=mock(PipelineConfig.class);
  when(pipelineConfig.getLabelTemplate()).thenReturn("${COUNT}-${hg}-${dep}-${pkg}-${scm}");
  MaterialConfig hg=mock(HgMaterialConfig.class);
  when(hg.getName()).thenReturn(new CaseInsensitiveString("hg"));
  when(hg.isUsedInLabelTemplate(pipelineConfig)).thenCallRealMethod();
  MaterialConfig dependency=mock(DependencyMaterialConfig.class);
  when(dependency.getName()).thenReturn(new CaseInsensitiveString("dep"));
  when(dependency.isUsedInLabelTemplate(pipelineConfig)).thenCallRealMethod();
  MaterialConfig aPackage=mock(PackageMaterialConfig.class);
  when(aPackage.getName()).thenReturn(new CaseInsensitiveString("pkg"));
  when(aPackage.isUsedInLabelTemplate(pipelineConfig)).thenCallRealMethod();
  MaterialConfig aPluggableSCM=mock(PluggableSCMMaterialConfig.class);
  when(aPluggableSCM.getName()).thenReturn(new CaseInsensitiveString("scm"));
  when(aPluggableSCM.isUsedInLabelTemplate(pipelineConfig)).thenCallRealMethod();
  assertThat(hg.isUsedInLabelTemplate(pipelineConfig),is(true));
  assertThat(dependency.isUsedInLabelTemplate(pipelineConfig),is(true));
  assertThat(aPackage.isUsedInLabelTemplate(pipelineConfig),is(true));
  assertThat(aPluggableSCM.isUsedInLabelTemplate(pipelineConfig),is(true));
  verify(hg).getName();
  verify(dependency).getName();
  verify(aPackage).getName();
  verify(aPluggableSCM).getName();
}
