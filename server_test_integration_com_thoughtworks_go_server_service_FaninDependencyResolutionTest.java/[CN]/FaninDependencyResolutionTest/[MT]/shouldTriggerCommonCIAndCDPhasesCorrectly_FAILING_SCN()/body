{
  GitMaterial git=u.wf(new GitMaterial("git"),"folder1");
  u.checkinInOrder(git,"g1","g2","g3");
  ScheduleTestUtil.AddedPipeline build=u.saveConfigWith("build",u.m(git));
  ScheduleTestUtil.AddedPipeline acceptance=u.saveConfigWith("acceptance",u.m(build));
  ScheduleTestUtil.AddedPipeline regression=u.saveConfigWith("regression",u.m(build),u.m(acceptance));
  ScheduleTestUtil.AddedPipeline staging=u.saveConfigWith("staging",u.m(acceptance),u.m(regression));
  ScheduleTestUtil.AddedPipeline production=u.saveConfigWith("production",u.m(staging));
  CruiseConfig cruiseConfig=goConfigFileDao.load();
  int i=1;
  String b_1=u.runAndPass(build,"g1");
  String a_1=u.runAndPass(acceptance,b_1);
  String r_1=u.runAndPass(regression,b_1,a_1);
  String s_1=u.runAndPass(staging,a_1,r_1);
  String p_1=u.runAndPass(production,s_1);
  String b_2=u.runAndPass(build,"g2");
  MaterialRevisions given=u.mrs(u.mr(build,true,b_2),u.mr(acceptance,false,a_1));
  MaterialRevisions expected=u.mrs(u.mr(build,true,b_1),u.mr(acceptance,false,a_1));
  assertThat(getRevisionsBasedOnDependencies(regression,cruiseConfig,given),is(expected));
  String a_2=u.runAndPass(acceptance,b_2);
  given=u.mrs(u.mr(build,true,b_2),u.mr(acceptance,false,a_2));
  expected=u.mrs(u.mr(build,true,b_2),u.mr(acceptance,true,a_2));
  assertThat(getRevisionsBasedOnDependencies(regression,cruiseConfig,given),is(expected));
  String r_2=u.runAndPass(regression,b_2,a_2);
  String r_3=u.runAndPass(regression,b_1,a_2);
  given=u.mrs(u.mr(acceptance,true,a_2),u.mr(regression,true,r_3));
  expected=u.mrs(u.mr(acceptance,true,a_2),u.mr(regression,true,r_2));
  assertThat(getRevisionsBasedOnDependencies(staging,cruiseConfig,given),is(expected));
  String s_2=u.runAndPass(staging,a_2,r_2);
  String s_3=u.runAndPass(staging,a_2,r_3);
  given=u.mrs(u.mr(staging,true,s_3));
  expected=u.mrs(u.mr(staging,true,s_2));
  assertThat(getRevisionsBasedOnDependencies(production,cruiseConfig,given),is(expected));
  String b_3=u.runAndPass(build,"g3");
  String a_3=u.runAndPass(acceptance,b_3);
  String r_4=u.runAndPass(regression,b_3,a_3);
  String s_4=u.runAndPass(staging,a_3,r_1);
  String s_5=u.runAndPass(staging,a_1,r_4);
  given=u.mrs(u.mr(acceptance,true,a_3),u.mr(regression,true,r_4));
  expected=u.mrs(u.mr(acceptance,true,a_3),u.mr(regression,true,r_4));
  MaterialRevisions previousMaterialRevisions=u.mrs(u.mr(acceptance,false,a_1),u.mr(regression,false,r_4));
  assertThat(getRevisionsBasedOnDependencies(staging,cruiseConfig,given),is(expected));
  String r_5=u.runAndPass(regression,b_3,a_3);
  given=u.mrs(u.mr(acceptance,true,a_3),u.mr(regression,true,r_5));
  expected=u.mrs(u.mr(acceptance,true,a_3),u.mr(regression,true,r_5));
  assertThat(getRevisionsBasedOnDependencies(staging,cruiseConfig,given),is(expected));
  previousMaterialRevisions=u.mrs(u.mr(acceptance,false,a_1),u.mr(regression,false,r_4));
  assertThat(getBuildCause(staging,given,previousMaterialRevisions).getMaterialRevisions(),is(expected));
}
