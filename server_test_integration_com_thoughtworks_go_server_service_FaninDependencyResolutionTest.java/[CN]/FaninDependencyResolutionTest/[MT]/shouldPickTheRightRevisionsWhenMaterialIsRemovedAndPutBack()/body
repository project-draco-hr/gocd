{
  GitMaterial git1=u.wf(new GitMaterial("git1-url"),"git-folder1");
  GitMaterial git2=u.wf(new GitMaterial("git2-url"),"git-folder2");
  GitMaterial git3=u.wf(new GitMaterial("git3-url"),"git-folder3");
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("P1",u.m(git1),u.m(git2));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("P2",u.m(git2));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("P3",u.m(p1),u.m(p2),u.m(git1));
  ScheduleTestUtil.AddedPipeline p4=u.saveConfigWith("P4",u.m(p3),u.m(git2));
  u.checkinInOrder(git1,"git1_1");
  u.checkinInOrder(git2,"git2_1");
  String p1_1=u.runAndPass(p1,"git1_1","git2_1");
  String p2_1=u.runAndPass(p2,"git2_1");
  String p3_1=u.runAndPass(p3,p1_1,p2_1,"git1_1");
  String p4_1=u.runAndPass(p4,p3_1,"git2_1");
  u.checkinInOrder(git1,"git1_2");
  u.checkinInOrder(git2,"git2_2");
  String p1_2=u.runAndPass(p1,"git1_2","git2_2");
  String p2_2=u.runAndPass(p2,"git2_2");
  String p3_2=u.runAndPass(p3,p1_2,p2_2,"git1_2");
  String p4_2=u.runAndPass(p4,p3_2,"git2_2");
  configHelper.setMaterialConfigForPipeline("P2",git3.config());
  CruiseConfig cruiseConfig=goConfigDao.load();
  p2=new ScheduleTestUtil.AddedPipeline(cruiseConfig.pipelineConfigByName(new CaseInsensitiveString("P2")),p2.material);
  u.checkinInOrder(git1,"git1_3");
  u.checkinInOrder(git2,"git2_3");
  u.checkinInOrder(git3,"git3_1");
  String p1_3=u.runAndPass(p1,"git1_3","git2_3");
  String p2_3=u.runAndPass(p2,"git3_1");
  String p3_3=u.runAndPass(p3,p1_3,p2_3,"git1_3");
  MaterialRevisions given=u.mrs(new MaterialRevision[]{u.mr(git2,true,"git2_3"),u.mr(p3,true,p3_3)});
  MaterialRevisions expected=u.mrs(new MaterialRevision[]{u.mr(git2,true,"git2_3"),u.mr(p3,true,p3_3)});
  MaterialRevisions finalRevisions=getRevisionsBasedOnDependencies(p4,cruiseConfig,given);
  assertThat(finalRevisions,is(expected));
  configHelper.setMaterialConfigForPipeline("P2",git2.config());
  cruiseConfig=goConfigDao.load();
  p2=new ScheduleTestUtil.AddedPipeline(cruiseConfig.pipelineConfigByName(new CaseInsensitiveString("P2")),p2.material);
  given=u.mrs(u.mr(git2,true,"git2_3"),u.mr(p3,true,p3_3));
  expected=u.mrs(new MaterialRevision[]{u.mr(git2,true,"git2_3"),u.mr(p3,true,p3_3)});
  finalRevisions=getRevisionsBasedOnDependencies(p4,cruiseConfig,given);
  assertThat(finalRevisions,is(expected));
}
