{
  String[] patDirs=tokenizePathAsArray(pattern);
  String[] strDirs=tokenizePathAsArray(str);
  int patIdxStart=0;
  int patIdxEnd=patDirs.length - 1;
  int strIdxStart=0;
  int strIdxEnd=strDirs.length - 1;
  while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
    String patDir=patDirs[patIdxStart];
    if (patDir.equals("**")) {
      break;
    }
    if (!match(patDir,strDirs[strIdxStart],isCaseSensitive)) {
      patDirs=null;
      strDirs=null;
      return false;
    }
    patIdxStart++;
    strIdxStart++;
  }
  if (strIdxStart > strIdxEnd) {
    for (int i=patIdxStart; i <= patIdxEnd; i++) {
      if (!patDirs[i].equals("**")) {
        patDirs=null;
        strDirs=null;
        return false;
      }
    }
    return true;
  }
 else {
    if (patIdxStart > patIdxEnd) {
      patDirs=null;
      strDirs=null;
      return false;
    }
  }
  while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
    String patDir=patDirs[patIdxEnd];
    if (patDir.equals("**")) {
      break;
    }
    if (!match(patDir,strDirs[strIdxEnd],isCaseSensitive)) {
      patDirs=null;
      strDirs=null;
      return false;
    }
    patIdxEnd--;
    strIdxEnd--;
  }
  if (strIdxStart > strIdxEnd) {
    for (int i=patIdxStart; i <= patIdxEnd; i++) {
      if (!patDirs[i].equals("**")) {
        patDirs=null;
        strDirs=null;
        return false;
      }
    }
    return true;
  }
  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
    int patIdxTmp=-1;
    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {
      if (patDirs[i].equals("**")) {
        patIdxTmp=i;
        break;
      }
    }
    if (patIdxTmp == patIdxStart + 1) {
      patIdxStart++;
      continue;
    }
    int patLength=(patIdxTmp - patIdxStart - 1);
    int strLength=(strIdxEnd - strIdxStart + 1);
    int foundIdx=-1;
    strLoop:     for (int i=0; i <= strLength - patLength; i++) {
      for (int j=0; j < patLength; j++) {
        String subPat=patDirs[patIdxStart + j + 1];
        String subStr=strDirs[strIdxStart + i + j];
        if (!match(subPat,subStr,isCaseSensitive)) {
          continue strLoop;
        }
      }
      foundIdx=strIdxStart + i;
      break;
    }
    if (foundIdx == -1) {
      patDirs=null;
      strDirs=null;
      return false;
    }
    patIdxStart=patIdxTmp;
    strIdxStart=foundIdx + patLength;
  }
  for (int i=patIdxStart; i <= patIdxEnd; i++) {
    if (!patDirs[i].equals("**")) {
      patDirs=null;
      strDirs=null;
      return false;
    }
  }
  return true;
}
