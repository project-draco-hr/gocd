{
  String jsonResponse="{\"errors\":[{\"key\":\"key1\", \"message\":\"err1\"},{\"key\":\"key1\", \"message\":\"err2\"},{\"key\":\"key2\", \"message\":\"err3\"}]}";
  TaskConfig configuration=new TaskConfig();
  final TaskConfigProperty property=new TaskConfigProperty("URL","http://foo");
  property.with(Property.SECURE,false);
  property.with(Property.REQUIRED,true);
  property.with(Property.DISPLAY_NAME,"URL");
  property.with(Property.DISPLAY_ORDER,0);
  configuration.add(property);
  final GoPluginApiResponse response=mock(GoPluginApiResponse.class);
  when(response.responseBody()).thenReturn(jsonResponse);
  ValidationResult result=new JsonBasedTaskExtensionHandler_V1().toValidationResult(response);
  Assert.assertThat(result.isSuccessful(),CoreMatchers.is(false));
  Assert.assertThat(result.getErrors().get(0).getKey(),CoreMatchers.is("key1"));
  Assert.assertThat(result.getErrors().get(0).getMessage(),CoreMatchers.is("err1"));
  Assert.assertThat(result.getErrors().get(1).getKey(),CoreMatchers.is("key1"));
  Assert.assertThat(result.getErrors().get(1).getMessage(),CoreMatchers.is("err2"));
  Assert.assertThat(result.getErrors().get(2).getKey(),CoreMatchers.is("key2"));
  Assert.assertThat(result.getErrors().get(2).getMessage(),CoreMatchers.is("err3"));
}
