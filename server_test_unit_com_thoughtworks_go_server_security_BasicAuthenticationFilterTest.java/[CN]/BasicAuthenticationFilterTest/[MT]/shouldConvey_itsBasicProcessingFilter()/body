{
  BasicAuthenticationFilter filter=new BasicAuthenticationFilter();
  final Boolean[] hadBasicMarkOnInsideAuthenticationManager=new Boolean[]{false};
  filter.setAuthenticationManager(new AuthenticationManager(){
    public Authentication authenticate(    Authentication authentication) throws AuthenticationException {
      hadBasicMarkOnInsideAuthenticationManager[0]=BasicAuthenticationFilter.isProcessingBasicAuth();
      return new UsernamePasswordAuthenticationToken("school-principal","u can be principal if you know this!");
    }
  }
);
  assertThat(BasicAuthenticationFilter.isProcessingBasicAuth(),is(false));
  MockHttpServletRequest httpRequest=new MockHttpServletRequest();
  httpRequest.addHeader("Authorization","Basic " + Base64.encodeBase64String("loser:boozer".getBytes()));
  filter.doFilterHttp(httpRequest,new MockHttpServletResponse(),new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
    }
  }
);
  assertThat(BasicAuthenticationFilter.isProcessingBasicAuth(),is(false));
  assertThat(hadBasicMarkOnInsideAuthenticationManager[0],is(true));
}
