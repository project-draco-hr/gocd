{
  dbHelper.cancelStage(stage);
  Resources resources=new Resources(new Resource("r1"),new Resource("r2"));
  ArtifactPlans artifactPlans=new ArtifactPlans(Arrays.asList(new ArtifactPlan(ArtifactType.file,"s1","d1"),new ArtifactPlan(ArtifactType.file,"s2","d2")));
  ArtifactPropertiesGenerators artifactPropertiesGenerators=new ArtifactPropertiesGenerators(new ArtifactPropertiesGenerator("n1","s1","x1"),new ArtifactPropertiesGenerator("n2","s2","x2"));
  configHelper.addAssociatedEntitiesForAJob(PIPELINE_NAME,STAGE_NAME,JOB_NAME,resources,artifactPlans,artifactPropertiesGenerators);
  dbHelper.schedulePipeline(configHelper.currentConfig().getPipelineConfigByName(new CaseInsensitiveString(PIPELINE_NAME)),new TimeProvider());
  JobPlan oldJobPlan=dbHelper.getBuildInstanceDao().orderedScheduledBuilds().get(0);
  assertThat(oldJobPlan.getResources().size(),is(2));
  assertThat(oldJobPlan.getArtifactPlans().size(),is(2));
  assertThat(oldJobPlan.getPropertyGenerators().size(),is(2));
  JobInstance oldJobInstance=dbHelper.getBuildInstanceDao().buildById(oldJobPlan.getJobId());
  scheduleService.rescheduleJob(oldJobInstance);
  JobInstance reloadedOldJobInstance=dbHelper.getBuildInstanceDao().buildById(oldJobInstance.getId());
  assertThat(reloadedOldJobInstance.isIgnored(),is(true));
  assertThat(reloadedOldJobInstance.getState(),is(JobState.Rescheduled));
  JobPlan newJobPlan=dbHelper.getBuildInstanceDao().orderedScheduledBuilds().get(1);
  assertThat(newJobPlan.getJobId(),is(not(oldJobInstance.getId())));
  assertThat(newJobPlan.getResources().size(),is(2));
  for (int i=0; i < newJobPlan.getResources().size(); i++) {
    Resource newResource=newJobPlan.getResources().get(i);
    Resource oldResource=oldJobPlan.getResources().get(i);
    assertThat(newResource.getId(),is(not(oldResource.getId())));
    assertThat(newResource.getName(),is(oldResource.getName()));
    assertThat((Long)ReflectionUtil.getField(newResource,"buildId"),is(newJobPlan.getJobId()));
  }
  assertThat(newJobPlan.getArtifactPlans().size(),is(2));
  for (int i=0; i < newJobPlan.getArtifactPlans().size(); i++) {
    ArtifactPlan newArtifactPlan=newJobPlan.getArtifactPlans().get(i);
    ArtifactPlan oldArtifactPlan=oldJobPlan.getArtifactPlans().get(i);
    assertThat(newArtifactPlan.getId(),is(not(oldArtifactPlan.getId())));
    assertThat(newArtifactPlan.getArtifactType(),is(oldArtifactPlan.getArtifactType()));
    assertThat(newArtifactPlan.getSrc(),is(oldArtifactPlan.getSrc()));
    assertThat(newArtifactPlan.getDest(),is(oldArtifactPlan.getDest()));
    assertThat(newArtifactPlan.getArtifactType(),is(oldArtifactPlan.getArtifactType()));
    assertThat((Long)ReflectionUtil.getField(newArtifactPlan,"buildId"),is(newJobPlan.getJobId()));
  }
  assertThat(newJobPlan.getPropertyGenerators().size(),is(2));
  for (int i=0; i < newJobPlan.getPropertyGenerators().size(); i++) {
    ArtifactPropertiesGenerator newArtifactPropertiesGenerator=newJobPlan.getPropertyGenerators().get(i);
    ArtifactPropertiesGenerator oldArtifactPropertiesGenerator=oldJobPlan.getPropertyGenerators().get(i);
    assertThat(newArtifactPropertiesGenerator.getId(),is(not(oldArtifactPropertiesGenerator.getId())));
    assertThat(newArtifactPropertiesGenerator.getName(),is(oldArtifactPropertiesGenerator.getName()));
    assertThat(newArtifactPropertiesGenerator.getSrc(),is(oldArtifactPropertiesGenerator.getSrc()));
    assertThat(newArtifactPropertiesGenerator.getXpath(),is(oldArtifactPropertiesGenerator.getXpath()));
    assertThat((Long)ReflectionUtil.getField(newArtifactPropertiesGenerator,"jobId"),is(newJobPlan.getJobId()));
  }
  JobInstance newJobInstance=dbHelper.getBuildInstanceDao().buildById(newJobPlan.getJobId());
  assertThat(newJobInstance.getState(),is(JobState.Scheduled));
}
