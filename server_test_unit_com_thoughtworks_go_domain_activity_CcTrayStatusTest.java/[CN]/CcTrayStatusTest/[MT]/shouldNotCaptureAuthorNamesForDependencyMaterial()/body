{
  CcTrayStatus status=new CcTrayStatus(materialRepo,stageDao);
  String pipelineName="cruise";
  String stageName="dev";
  JobInstance job=failedJob(pipelineName,DEFAULT_LAST_BUILD_LABEL,stageName,"linux-firefox");
  Stage stage=new Stage(stageName,new JobInstances(job),"me","manual",false,false,new TimeProvider());
  stage.setIdentifier(new StageIdentifier(pipelineName,1,DEFAULT_LAST_BUILD_LABEL,stageName,"1"));
  stage.calculateResult();
  stage.setPipelineId(12l);
  Modification losersCommit=ModificationsMother.checkinWithComment("123","comment 1","loser","loser@boozer.com",new Date(),"foo.c");
  MaterialRevision changedRevision=new MaterialRevision(MaterialsMother.gitMaterial("foo.com"),losersCommit);
  changedRevision.markAsChanged();
  MaterialRevision pipelineRevision=ModificationsMother.dependencyMaterialRevision("dep-pipe",1,"pipe-1","dep-stage",1,new Date());
  pipelineRevision.markAsChanged();
  MaterialRevisions revisions=new MaterialRevisions(changedRevision,pipelineRevision);
  when(materialRepo.findMaterialRevisionsForPipeline(12l)).thenReturn(revisions);
  status.stageStatusChanged(stage);
  assertThat(status.projects().size(),is(2));
  HashSet<String> breakers=new HashSet<String>();
  breakers.add("loser");
  ProjectStatus projectStatus=new ProjectStatus("cruise :: dev :: linux-firefox","Sleeping","Failure",DEFAULT_LAST_BUILD_LABEL,job.getCompletedDate(),job.getIdentifier().webUrl(),breakers);
  assertThat(status.projects(),hasItem(projectStatus));
  assertThat(status.projects(),hasItem(new ProjectStatus("cruise :: dev","Sleeping","Failure",DEFAULT_LAST_BUILD_LABEL,job.getCompletedDate(),stage.getIdentifier().webUrl(),breakers)));
}
