{
  JobConfigs jobConfigs=new JobConfigs();
  ArtifactPropertiesGenerators generators=new ArtifactPropertiesGenerators();
  generators.add(new ArtifactPropertiesGenerator("property-name","artifact-path","artifact-xpath"));
  JobConfig jobConfig=new JobConfig(new CaseInsensitiveString("test-job"),new Resources(),new ArtifactPlans(),generators);
  jobConfig.setRunInstanceCount(3);
  jobConfigs.add(jobConfig);
  StageConfig stage=new StageConfig(new CaseInsensitiveString("test-stage"),jobConfigs);
  MaterialConfigs materialConfigs=new MaterialConfigs(MaterialConfigsMother.dependencyMaterialConfig());
  PipelineConfig pipelineConfig=new PipelineConfig(new CaseInsensitiveString("test-pipeline"),materialConfigs,stage);
  BuildCause cause=modifySomeFiles(pipelineConfig,ModificationsMother.nextRevision());
  saveRev(cause);
  configFileEditor.addPipeline(CaseInsensitiveString.str(pipelineConfig.name()),CaseInsensitiveString.str(stage.name()));
  queue.createPipeline(cause,pipelineConfig,new DefaultSchedulingContext(cause.getApprover(),configFileEditor.currentConfig().agents()),"md5-test",new TimeProvider());
  List<JobPlan> plans=jobService.orderedScheduledBuilds();
  assertThat(plans.size(),is(3));
  assertThat(plans.toArray(),hasItemInArray(hasProperty("name",is(RunMultipleInstance.CounterBasedJobNameGenerator.appendMarker("test-job",1)))));
  assertThat(plans.toArray(),hasItemInArray(hasProperty("name",is(RunMultipleInstance.CounterBasedJobNameGenerator.appendMarker("test-job",2)))));
  assertThat(plans.toArray(),hasItemInArray(hasProperty("name",is(RunMultipleInstance.CounterBasedJobNameGenerator.appendMarker("test-job",3)))));
}
