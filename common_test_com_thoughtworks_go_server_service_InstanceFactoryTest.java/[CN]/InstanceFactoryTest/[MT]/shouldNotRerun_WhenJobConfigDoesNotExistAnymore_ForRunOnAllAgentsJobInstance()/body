{
  Date old=new DateTime().minusDays(2).toDate();
  StageConfig stageConfig=StageConfigMother.custom("dev","rails","java");
  JobConfig railsConfig=stageConfig.getJobs().getJob(new CaseInsensitiveString("rails"));
  railsConfig.setRunOnAllAgents(true);
  railsConfig.addResource("foobar");
  DefaultSchedulingContext schedulingContext=new DefaultSchedulingContext("loser",new Agents(new AgentConfig("abcd1234","host","127.0.0.2",new Resources(new Resource("foobar"))),new AgentConfig("1234abcd","ghost","192.168.1.2",new Resources(new Resource("baz"),new Resource("foobar"))),new AgentConfig("7890abdc","lost","10.4.3.55",new Resources(new Resource("crapyagent")))));
  RunOnAllAgents.CounterBasedJobNameGenerator jobNameGenerator=new RunOnAllAgents.CounterBasedJobNameGenerator(CaseInsensitiveString.str(railsConfig.name()));
  JobInstances jobs=instanceFactory.createJobInstance(new CaseInsensitiveString("dev"),railsConfig,schedulingContext,new TimeProvider(),jobNameGenerator);
  int jobId=100;
  for (  JobInstance job : jobs) {
    passJob(new Date(),++jobId,jobId * 10,job);
  }
  JobInstance java=jobInstance(old,"java",12,22);
  jobs.add(java);
  Stage stage=stage(9,jobs.toArray(new JobInstance[0]));
  Stage newStage=null;
  CannotRerunJobException exception=null;
  try {
    newStage=instanceFactory.createStageForRerunOfJobs(stage,a("rails-runOnAll-1"),new DefaultSchedulingContext("loser",new Agents()),StageConfigMother.custom("dev","java"),new TimeProvider(),"md5");
    fail("should not schedule when job config does not exist anymore");
  }
 catch (  CannotRerunJobException e) {
    exception=e;
  }
  assertThat(exception.getJobName(),CoreMatchers.is("rails"));
  assertThat(newStage,CoreMatchers.is(nullValue()));
}
