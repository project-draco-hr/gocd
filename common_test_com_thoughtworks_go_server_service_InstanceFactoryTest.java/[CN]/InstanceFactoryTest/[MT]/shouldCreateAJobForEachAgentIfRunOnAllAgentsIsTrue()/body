{
  Agents agents=new Agents();
  agents.add(new AgentConfig("uuid1"));
  agents.add(new AgentConfig("uuid2"));
  JobConfig jobConfig=new JobConfig("foo");
  jobConfig.setRunOnAllAgents(true);
  SchedulingContext context=mock(SchedulingContext.class);
  when(context.getApprovedBy()).thenReturn("chris");
  when(context.findAgentsMatching(new Resources())).thenReturn(agents);
  when(context.getEnvironmentVariablesConfig()).thenReturn(new EnvironmentVariablesConfig());
  when(context.overrideEnvironmentVariables(any(EnvironmentVariablesConfig.class))).thenReturn(context);
  RunOnAllAgents.CounterBasedJobNameGenerator jobNameGenerator=new RunOnAllAgents.CounterBasedJobNameGenerator(CaseInsensitiveString.str(jobConfig.name()));
  JobInstances jobs=instanceFactory.createJobInstance(new CaseInsensitiveString("stageName"),jobConfig,context,new TimeProvider(),jobNameGenerator);
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("name",is("foo-runOnAll-1"))));
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("agentUuid",is("uuid1"))));
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("runOnAllAgents",is(true))));
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("name",is("foo-runOnAll-1"))));
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("agentUuid",is("uuid2"))));
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("runOnAllAgents",is(true))));
  assertThat(jobs.size(),is(2));
}
