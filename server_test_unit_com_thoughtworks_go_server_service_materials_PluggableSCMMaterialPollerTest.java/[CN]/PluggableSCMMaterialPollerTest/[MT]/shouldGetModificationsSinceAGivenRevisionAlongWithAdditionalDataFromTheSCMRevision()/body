{
  String previousRevision="rev-122";
  Date timestamp=new Date();
  HashMap<String,String> dataInPreviousRevision=new HashMap<String,String>();
  dataInPreviousRevision.put("1","one");
  PluggableSCMMaterialRevision knownRevision=new PluggableSCMMaterialRevision(previousRevision,timestamp,dataInPreviousRevision);
  ArgumentCaptor<SCMRevision> knownSCMRevision=new ArgumentCaptor<SCMRevision>();
  Map<String,String> data=new HashMap<String,String>();
  String dataKey="2";
  String dataValue="two";
  data.put(dataKey,dataValue);
  SCMRevision latestRevision=new SCMRevision("rev-123",timestamp,"user","comment-123",data,null);
  when(scmExtension.latestModificationSince(eq(material.getPluginId()),scmConfiguration.capture(),eq(flyweightFolderPath),knownSCMRevision.capture())).thenReturn(asList(latestRevision));
  List<Modification> modifications=poller.modificationsSince(material,new File(flyweightFolderPath),knownRevision,null);
  assertThat(knownSCMRevision.getValue().getRevision(),is(previousRevision));
  assertThat(knownSCMRevision.getValue().getTimestamp(),is(timestamp));
  assertThat(knownSCMRevision.getValue().getData(),is(notNullValue()));
  assertThat(knownSCMRevision.getValue().getData().size(),is(dataInPreviousRevision.size()));
  assertThat(knownSCMRevision.getValue().getData().get("1"),is(dataInPreviousRevision.get("1")));
  HashMap<String,String> expected=new HashMap<String,String>();
  expected.put(dataKey,dataValue);
  Modification firstModification=modifications.get(0);
  assertThat(firstModification.getRevision(),is("rev-123"));
  assertThat(firstModification.getModifiedTime(),is(timestamp));
  assertThat(firstModification.getUserName(),is("user"));
  assertThat(firstModification.getComment(),is("comment-123"));
  assertThat(firstModification.getAdditionalData(),is(JsonHelper.toJsonString(expected)));
  assertThat(firstModification.getModifiedFiles().isEmpty(),is(true));
}
