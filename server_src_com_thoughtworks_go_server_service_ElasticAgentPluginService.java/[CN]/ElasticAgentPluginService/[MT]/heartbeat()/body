{
  LinkedMultiValueMap<String,ElasticAgentMetadata> elasticAgents=agentService.allElasticAgents();
  for (  PluginDescriptor descriptor : elasticAgentPluginRegistry.getPlugins()) {
    List<ElasticAgentMetadata> elasticAgentMetadatas;
    if (elasticAgents.containsKey(descriptor.id())) {
      elasticAgentMetadatas=elasticAgents.remove(descriptor.id());
    }
 else {
      elasticAgentMetadatas=new ArrayList<>();
    }
    Collection<AgentMetadata> metadatas=Collections2.transform(elasticAgentMetadatas,new Function<ElasticAgentMetadata,AgentMetadata>(){
      @Override public AgentMetadata apply(      ElasticAgentMetadata input){
        return toAgentMetadata(input);
      }
    }
);
    elasticAgentPluginRegistry.serverPing(descriptor.id(),metadatas);
  }
  if (!elasticAgents.isEmpty()) {
    for (    String pluginId : elasticAgents.keySet()) {
      Collection<String> uuids=Collections2.transform(elasticAgents.get(pluginId),new Function<ElasticAgentMetadata,String>(){
        @Override public String apply(        ElasticAgentMetadata input){
          return input.uuid();
        }
      }
);
      LOGGER.warn("Elastic agent plugin with identifier {} has gone missing, but left behind {} agent(s) with UUIDs {}.",pluginId,elasticAgents.get(pluginId).size(),uuids);
    }
  }
}
