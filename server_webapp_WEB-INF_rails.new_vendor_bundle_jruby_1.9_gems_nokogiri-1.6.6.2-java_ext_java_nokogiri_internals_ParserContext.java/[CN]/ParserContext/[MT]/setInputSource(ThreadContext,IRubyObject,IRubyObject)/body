{
  source=new InputSource();
  Ruby ruby=context.getRuntime();
  ParserContext.setUrl(context,source,url);
  if (setEncoding(context,data))   return;
  RubyString stringData=null;
  if (invoke(context,data,"respond_to?",ruby.newSymbol("to_io").to_sym()).isTrue()) {
    RubyIO io=(RubyIO)TypeConverter.convertToType(data,ruby.getIO(),"to_io");
    source.setByteStream(new UncloseableInputStream(io.getInStream()));
  }
 else {
    if (invoke(context,data,"respond_to?",ruby.newSymbol("string").to_sym()).isTrue()) {
      stringData=invoke(context,data,"string").convertToString();
    }
 else     if (data instanceof RubyString) {
      stringData=(RubyString)data;
    }
 else {
      throw ruby.newArgumentError("must be kind_of String or respond to :to_io or :string");
    }
  }
  if (stringData != null) {
    String encName=null;
    if (stringData.encoding(context) != null) {
      encName=stringData.encoding(context).toString();
    }
    Charset charset=null;
    if (encName != null) {
      try {
        charset=Charset.forName(encName);
      }
 catch (      UnsupportedCharsetException e) {
      }
    }
    ByteList bytes=stringData.getByteList();
    if (charset != null) {
      StringReader reader=new StringReader(new String(bytes.unsafeBytes(),bytes.begin(),bytes.length(),charset));
      source.setCharacterStream(reader);
      source.setEncoding(charset.name());
    }
 else {
      stringDataSize=bytes.length() - bytes.begin();
      ByteArrayInputStream stream=new ByteArrayInputStream(bytes.unsafeBytes(),bytes.begin(),bytes.length());
      source.setByteStream(stream);
    }
  }
}
