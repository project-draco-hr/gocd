{
  final SvnMaterial svnMaterial1=mock(SvnMaterial.class);
  when(svnMaterial1.getUrl()).thenReturn("http://localhost/svn/project1");
  final SvnMaterial svnMaterial2=mock(SvnMaterial.class);
  when(svnMaterial2.getUrl()).thenReturn("http://foo.bar");
  final HashSet<SvnMaterial> svnMaterials=new HashSet<SvnMaterial>();
  svnMaterials.add(svnMaterial1);
  svnMaterials.add(svnMaterial2);
  final SvnCommand spy=spy(subversion);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      final ConsoleResult consoleResult=mock(ConsoleResult.class);
      when(consoleResult.outputAsString()).thenReturn(svnInfoOutput);
      final CommandLine commandLine=(CommandLine)invocation.getArguments()[0];
      if (commandLine.toString().contains("http://localhost/svn/project1")) {
        return consoleResult;
      }
 else {
        throw new RuntimeException("Some thing crapped out");
      }
    }
  }
).when(spy).executeCommand(any(CommandLine.class));
  HashMap<String,String> urlToRemoteUUIDMap=null;
  try {
    urlToRemoteUUIDMap=spy.createUrlToRemoteUUIDMap(svnMaterials);
  }
 catch (  Exception e) {
    fail("Should not have failed although exception was thrown " + e);
  }
  assertThat(urlToRemoteUUIDMap.size(),is(1));
  assertThat(urlToRemoteUUIDMap.get("http://localhost/svn/project1"),is("b51fe673-20c0-4205-a07b-5deb54bb09f3"));
  verify(spy,times(2)).executeCommand(any(CommandLine.class));
}
