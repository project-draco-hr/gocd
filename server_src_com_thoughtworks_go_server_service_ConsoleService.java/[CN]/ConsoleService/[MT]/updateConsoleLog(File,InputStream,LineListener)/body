{
  File parentFile=dest.getParentFile();
  parentFile.mkdirs();
  LOGGER.trace("Updating console log [" + dest.getAbsolutePath() + "]");
  char[] data=new char[DEFAULT_CONSOLE_LOG_LINE_BUFFER_SIZE];
  char[] overflow=new char[DEFAULT_CONSOLE_LOG_LINE_BUFFER_SIZE];
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(dest,dest.exists()));
    BufferedReader reader=new BufferedReader(new InputStreamReader(in));
    int hasRead, overflowIndex, offset=0, end;
    while ((hasRead=reader.read(data,offset,data.length - offset)) != -1) {
      end=offset + hasRead;
      overflowIndex=end;
      for (int i=end; i > 0; i--) {
        int index=i - 1;
        char c=data[index];
        if ('\n' == c) {
          break;
        }
        overflow[index]=data[index];
        overflowIndex=index;
      }
      if (overflowIndex == 0) {
        if (end == data.length) {
          data=realloc(data);
          overflow=realloc(overflow);
          offset=end;
          continue;
        }
 else {
          overflowIndex=end;
          offset=0;
        }
      }
      lineListener.copyLine(new CharArraySequence(data,0,overflowIndex));
      writer.write(data,0,overflowIndex);
      for (int i=overflowIndex; i < end; i++) {
        data[i - overflowIndex]=overflow[i];
      }
      offset=end - overflowIndex;
    }
  }
 catch (  IOException e) {
    LOGGER.error("Failed to update console log at : [" + dest.getAbsolutePath() + "]",e);
    return false;
  }
 finally {
    if (writer != null) {
      writer.close();
    }
  }
  if (LOGGER.isTraceEnabled()) {
    LOGGER.trace("Console log [" + dest.getAbsolutePath() + "] saved.");
  }
  return true;
}
