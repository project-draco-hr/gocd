{
  Map hashMap=new HashMap();
  hashMap.put(OnCancelConfig.ON_CANCEL_OPTIONS,"nant");
  Map valueMap=new HashMap();
  valueMap.put(BuildTask.BUILD_FILE,"default.build");
  valueMap.put(BuildTask.TARGET,"compile");
  valueMap.put(BuildTask.WORKING_DIRECTORY,"pwd");
  valueMap.put(NantTask.NANT_PATH,"/usr/bin/nant");
  hashMap.put(OnCancelConfig.NANT_ON_CANCEL,valueMap);
  hashMap.put(OnCancelConfig.EXEC_ON_CANCEL,new HashMap());
  hashMap.put(OnCancelConfig.ANT_ON_CANCEL,new HashMap());
  hashMap.put(OnCancelConfig.RAKE_ON_CANCEL,new HashMap());
  when(taskFactory.taskInstanceFor(new NantTask().getTaskType())).thenReturn(new NantTask());
  OnCancelConfig cancelConfig=OnCancelConfig.create(hashMap,taskFactory);
  NantTask expectedNantTask=new NantTask();
  expectedNantTask.setBuildFile("default.build");
  expectedNantTask.setTarget("compile");
  expectedNantTask.setWorkingDirectory("pwd");
  expectedNantTask.setNantPath("/usr/bin/nant");
  assertThat((NantTask)cancelConfig.getTask(),is(expectedNantTask));
}
