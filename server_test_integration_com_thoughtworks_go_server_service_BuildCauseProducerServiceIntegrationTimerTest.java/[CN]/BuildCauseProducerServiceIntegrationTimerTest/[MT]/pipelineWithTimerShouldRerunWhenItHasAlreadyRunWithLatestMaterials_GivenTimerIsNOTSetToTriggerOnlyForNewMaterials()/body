{
  int i=1;
  String pipelineName="p1";
  GitMaterial git1=u.wf(new GitMaterial("git1"),"folder");
  ScheduleTestUtil.AddedPipeline up1=u.saveConfigWith("up1",u.m(git1));
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWithTimer(pipelineName,u.timer("* * * * * ? 2000",false),u.m(git1),u.m(up1));
  u.checkinFile(git1,"g11",TestFileUtil.createTempFile("blah_g11"),ModifiedAction.added);
  String up1_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(up1,u.d(i++),"g11");
  pipelineTimeline.update();
  buildCauseProducerService.timerSchedulePipeline(p1.config,new ServerHealthStateOperationResult());
  assertThat(piplineScheduleQueue.toBeScheduled().size(),is(1));
  assertThat(piplineScheduleQueue.toBeScheduled().get(pipelineName).getMaterialRevisions(),isSameMaterialRevisionsAs(u.mrs(u.mr(git1,true,"g11"),u.mr(up1,true,up1_1))));
  BuildCause buildCause=piplineScheduleQueue.toBeScheduled().get(pipelineName);
  String up1_2=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(up1,u.d(i++),"g11");
  piplineScheduleQueue.finishSchedule(pipelineName,buildCause,buildCause);
  buildCauseProducerService.timerSchedulePipeline(p1.config,new ServerHealthStateOperationResult());
  assertThat(piplineScheduleQueue.toBeScheduled().size(),is(1));
  assertThat(piplineScheduleQueue.toBeScheduled().get(pipelineName).getMaterialRevisions(),is(u.mrs(u.mr(git1,false,"g11"),u.mr(up1,false,up1_2))));
  assertThat(logFixture.contains(Level.INFO,"Skipping scheduling of timer-triggered pipeline 'p1' as it has previously run with the latest material(s)."),is(false));
}
