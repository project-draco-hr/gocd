{
  int i=1;
  String pipelineName="p1";
  GitMaterial git1=u.wf(new GitMaterial("git1"),"folder1");
  GitMaterial git2=u.wf(new GitMaterial("git2"),"folder2");
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("up1",u.m(git1));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWithTimer(pipelineName,u.timer("* * * * * ? 2000",true),u.m(git1),u.m(git2),u.m(p1));
  u.checkinFile(git1,"g11",TestFileUtil.createTempFile("blah_g11"),ModifiedAction.added);
  u.checkinFile(git2,"g21",TestFileUtil.createTempFile("blah_g21"),ModifiedAction.added);
  Date mduTimeOfG11=u.d(i++);
  String p1_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,mduTimeOfG11,"g11");
  pipelineTimeline.update();
  buildCauseProducerService.timerSchedulePipeline(p2.config,new ServerHealthStateOperationResult());
  assertThat(piplineScheduleQueue.toBeScheduled().size(),is(1));
  assertThat(piplineScheduleQueue.toBeScheduled().get(pipelineName).getMaterialRevisions(),isSameMaterialRevisionsAs(u.mrs(u.mr(git1,true,"g11"),u.mr(git2,true,"g21"),u.mr(p1,true,p1_1))));
  BuildCause buildCause=piplineScheduleQueue.toBeScheduled().get(pipelineName);
  u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),"g11","g21",p1_1);
  piplineScheduleQueue.finishSchedule(pipelineName,buildCause,buildCause);
  u.checkinFile(git2,"g22",TestFileUtil.createTempFile("blah_g22"),ModifiedAction.added);
  String p1_2=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,mduTimeOfG11,"g11");
  pipelineTimeline.update();
  buildCauseProducerService.timerSchedulePipeline(p2.config,new ServerHealthStateOperationResult());
  assertThat(piplineScheduleQueue.toBeScheduled().size(),is(1));
  assertThat(piplineScheduleQueue.toBeScheduled().get(pipelineName).getMaterialRevisions(),isSameMaterialRevisionsAs(u.mrs(u.mr(git1,false,"g11"),u.mr(git2,true,"g22"),u.mr(p1,true,p1_2))));
  assertThat(logFixture.contains(Level.INFO,"Skipping scheduling of timer-triggered pipeline 'p1' as it has previously run with the latest material(s)."),is(false));
}
