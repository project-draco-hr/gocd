{
  String plugin1="task-plugin-1";
  String plugin2="task-plugin-2";
  when(pluginManager.getPluginDescriptorFor(plugin1)).thenReturn(new GoPluginDescriptor(plugin1,"1",null,null,null,false));
  when(pluginManager.getPluginDescriptorFor(plugin2)).thenReturn(new GoPluginDescriptor(plugin2,"1",null,null,null,false));
  storeTaskPreferences(plugin1,"key_1","key_2");
  storeTaskPreferences(plugin2,"key_3","key_4");
  when(registry.implementersOf(Task.class)).thenReturn(Arrays.<Class<? extends Task>>asList(ExecTask.class,PluggableTask.class));
  PluggableTask expectedPluggableTaskForPlugin1=new PluggableTask("",new PluginConfiguration(plugin1,"1"),new Configuration(create("key_1"),create("key_2")));
  PluggableTask expectedPluggableTaskForPlugin2=new PluggableTask("",new PluginConfiguration(plugin2,"1"),new Configuration(create("key_3"),create("key_4")));
  when(registry.getViewModelFor(new ExecTask(),"new")).thenReturn(viewModel(new ExecTask()));
  when(registry.getViewModelFor(expectedPluggableTaskForPlugin1,"new")).thenReturn(viewModel(expectedPluggableTaskForPlugin1));
  when(registry.getViewModelFor(expectedPluggableTaskForPlugin2,"new")).thenReturn(viewModel(expectedPluggableTaskForPlugin2));
  List<PluggableViewModel> viewModels=taskViewService.getTaskViewModels();
  assertThat(viewModels.size(),is(3));
  assertThat(viewModels.get(1).getModel(),instanceOf(PluggableTask.class));
  assertThat(viewModels.get(2).getModel(),instanceOf(PluggableTask.class));
  assertThat((PluggableTask)viewModels.get(1).getModel(),is(expectedPluggableTaskForPlugin1));
  assertThat((PluggableTask)viewModels.get(2).getModel(),is(expectedPluggableTaskForPlugin2));
  verify(registry).getViewModelFor(expectedPluggableTaskForPlugin1,"new");
  verify(registry).getViewModelFor(expectedPluggableTaskForPlugin2,"new");
}
