{
  List<String> errors=new ArrayList<>();
  String defaultValue=null;
  try {
    defaultValue=(String)configuration.get("default-value");
  }
 catch (  Exception e) {
    errors.add(format("'default-value' property for key '%s' should be of type string",key));
  }
  Boolean partOfIdentity=null;
  try {
    partOfIdentity=(Boolean)configuration.get("part-of-identity");
  }
 catch (  Exception e) {
    errors.add(format("'part-of-identity' property for key '%s' should be of type boolean",key));
  }
  Boolean isSecure=null;
  try {
    isSecure=(Boolean)configuration.get("secure");
  }
 catch (  Exception e) {
    errors.add(format("'secure' property for key '%s' should be of type boolean",key));
  }
  Boolean required=null;
  try {
    required=(Boolean)configuration.get("required");
  }
 catch (  Exception e) {
    errors.add(format("'required' property for key '%s' should be of type boolean",key));
  }
  String displayName=null;
  try {
    displayName=(String)configuration.get("display-name");
  }
 catch (  Exception e) {
    errors.add(format("'display-name' property for key '%s' should be of type string",key));
  }
  Integer displayOrder=null;
  try {
    displayOrder=configuration.get("display-order") == null ? null : Integer.parseInt((String)configuration.get("display-order"));
  }
 catch (  Exception e) {
    errors.add(format("'display-order' property for key '%s' should be of type integer",key));
  }
  if (!errors.isEmpty()) {
    throw new RuntimeException(StringUtils.join(errors,", "));
  }
  PackageMaterialProperty packageMaterialProperty=new PackageMaterialProperty(key);
  if (!isEmpty(defaultValue)) {
    packageMaterialProperty.withDefault(defaultValue);
  }
  if (partOfIdentity != null) {
    packageMaterialProperty.with(Property.PART_OF_IDENTITY,partOfIdentity);
  }
  if (isSecure != null) {
    packageMaterialProperty.with(Property.SECURE,isSecure);
  }
  if (required != null) {
    packageMaterialProperty.with(Property.REQUIRED,required);
  }
  if (!isEmpty(displayName)) {
    packageMaterialProperty.with(Property.DISPLAY_NAME,displayName);
  }
  if (displayOrder != null) {
    packageMaterialProperty.with(Property.DISPLAY_ORDER,displayOrder);
  }
  return packageMaterialProperty;
}
