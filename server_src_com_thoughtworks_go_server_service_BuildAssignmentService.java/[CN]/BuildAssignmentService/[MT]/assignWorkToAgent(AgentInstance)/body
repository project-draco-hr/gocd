{
  if (!agent.isRegistered()) {
    return new UnregisteredAgentWork(agent.getUuid());
  }
  if (agent.isDisabled()) {
    return new DeniedAgentWork(agent.getUuid());
  }
synchronized (this) {
    scheduleService.rescheduleAbandonedBuildIfNecessary(agent.getAgentIdentifier());
    final JobPlan job=findMatchingJob(agent);
    if (job != null) {
      Work buildWork=createWork(agent,job);
      AgentBuildingInfo buildingInfo=new AgentBuildingInfo(job.getIdentifier().buildLocatorForDisplay(),job.getIdentifier().buildLocator());
      if (agent.isElastic()) {
        if (!elasticAgentPluginService.shouldAssignWork(agent.elasticAgentMetadata(),environmentConfigService.envForPipeline(job.getPipelineName()),job.getJobAgentConfig())) {
          return NO_WORK;
        }
 else {
          elasticAgentPluginService.notifyAgentBusy(agent.elasticAgentMetadata());
        }
      }
      agentService.building(agent.getUuid(),buildingInfo);
      LOGGER.info("[Agent Assignment] Assigned job [{}] to agent [{}]",job.getIdentifier(),agent.agentConfig().getAgentIdentifier());
      return buildWork;
    }
  }
  return NO_WORK;
}
