{
  try {
    return (Work)transactionTemplate.transactionSurrounding(new TransactionTemplate.TransactionSurrounding<RuntimeException>(){
      public Object surrounding(){
        final String agentUuid=agent.getUuid();
        final Pipeline[] pipeline=new Pipeline[1];
        try {
          pipeline[0]=scheduledPipelineLoader.pipelineWithPasswordAwareBuildCauseByBuildId(job.getJobId());
        }
 catch (        StaleMaterialsOnBuildCause e) {
          return NO_WORK;
        }
        List<Task> tasks=goConfigService.tasksForJob(pipeline[0].getName(),job.getIdentifier().getStageName(),job.getName());
        final List<Builder> builders=builderFactory.buildersForTasks(pipeline[0],tasks,resolver);
        return transactionTemplate.execute(new TransactionCallback(){
          public Object doInTransaction(          TransactionStatus status){
            if (scheduleService.updateAssignedInfo(agentUuid,job)) {
              return NO_WORK;
            }
            BuildAssignment buildAssignment=BuildAssignment.create(job,pipeline[0].getBuildCause(),builders,pipeline[0].defaultWorkingFolder());
            environmentConfigService.enhanceEnvironmentVariables(buildAssignment);
            return new BuildWork(buildAssignment);
          }
        }
);
      }
    }
);
  }
 catch (  PipelineNotFoundException e) {
    removeJobIfNotPresentInCruiseConfig(goConfigService.getCurrentConfig(),job);
    throw e;
  }
}
