{
  securityContext.setAuthentication(new TestingAuthenticationToken("jez","badger",new GrantedAuthority[]{new GrantedAuthorityImpl(GoAuthority.ROLE_TEMPLATE_SUPERVISOR.toString())}));
  request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,securityContext);
  view.exposeHelpers(velocityContext,request);
  assertThat((Boolean)velocityContext.get(GoVelocityView.VIEW_ADMINISTRATOR_RIGHTS),is(true));
  securityContext.setAuthentication(new TestingAuthenticationToken("jez","badger",new GrantedAuthority[]{new GrantedAuthorityImpl(GoAuthority.ROLE_GROUP_SUPERVISOR.toString())}));
  request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,securityContext);
  view.exposeHelpers(velocityContext,request);
  assertThat((Boolean)velocityContext.get(GoVelocityView.VIEW_ADMINISTRATOR_RIGHTS),is(true));
  securityContext.setAuthentication(new TestingAuthenticationToken("jez","badger",new GrantedAuthority[]{new GrantedAuthorityImpl(GoAuthority.ROLE_SUPERVISOR.toString())}));
  request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,securityContext);
  view.exposeHelpers(velocityContext,request);
  assertThat((Boolean)velocityContext.get(GoVelocityView.VIEW_ADMINISTRATOR_RIGHTS),is(true));
  securityContext.setAuthentication(new TestingAuthenticationToken("jez","badger",new GrantedAuthority[]{new GrantedAuthorityImpl(GoAuthority.ROLE_USER.toString())}));
  request.getSession().setAttribute(SPRING_SECURITY_CONTEXT_KEY,securityContext);
  view.exposeHelpers(velocityContext,request);
  assertThat(velocityContext.get(GoVelocityView.VIEW_ADMINISTRATOR_RIGHTS),is(nullValue()));
}
