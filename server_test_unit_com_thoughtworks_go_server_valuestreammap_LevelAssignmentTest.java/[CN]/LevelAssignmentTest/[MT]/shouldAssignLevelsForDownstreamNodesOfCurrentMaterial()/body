{
  Node p=new PipelineDependencyNode("p","p");
  Node p1=new PipelineDependencyNode("p1","p1");
  Node p2=new PipelineDependencyNode("p2","p2");
  Node p3=new PipelineDependencyNode("p3","p3");
  GitMaterial material=new GitMaterial("url");
  Modification modification=ModificationsMother.aCheckIn("1");
  ValueStreamMap valueStreamMap=new ValueStreamMap(material,null,modification);
  Node gitNode=valueStreamMap.getCurrentMaterial();
  valueStreamMap.addDownstreamNode(p,gitNode.getId());
  valueStreamMap.addDownstreamNode(p1,p.getId());
  valueStreamMap.addDownstreamNode(p2,p.getId());
  valueStreamMap.addDownstreamNode(p3,p1.getId());
  valueStreamMap.addDownstreamNode(p3,p2.getId());
  NodeLevelMap levelToNodeMap=new LevelAssignment().apply(valueStreamMap);
  assertThat(valueStreamMap.getCurrentMaterial().getLevel(),is(0));
  assertThat(p.getLevel(),is(1));
  assertThat(p1.getLevel(),is(2));
  assertThat(p2.getLevel(),is(2));
  assertThat(p3.getLevel(),is(3));
  assertThat(levelToNodeMap.get(0),contains(valueStreamMap.getCurrentMaterial()));
  assertThat(levelToNodeMap.get(1),containsInAnyOrder(p));
  assertThat(levelToNodeMap.get(2),containsInAnyOrder(p1,p2));
  assertThat(levelToNodeMap.get(3),contains(p3));
}
