{
  String current="p";
  Node p1=new PipelineDependencyNode("p1","p1");
  Node p2=new PipelineDependencyNode("p2","p2");
  Node p3=new PipelineDependencyNode("p3","p3");
  Node gitNode=new SCMDependencyNode("git","g","git");
  ValueStreamMap valueStreamMap=new ValueStreamMap(current,new PipelineRevision(current,1,"1"));
  valueStreamMap.addUpstreamMaterialNode(gitNode,new CaseInsensitiveString("trunk"),new Modifications(ModificationsMother.aCheckIn("1")),"p");
  valueStreamMap.addDownstreamNode(p1,current);
  valueStreamMap.addDownstreamNode(p2,current);
  valueStreamMap.addDownstreamNode(p3,p1.getId());
  valueStreamMap.addDownstreamNode(p3,p2.getId());
  NodeLevelMap levelToNodeMap=new LevelAssignment().apply(valueStreamMap);
  assertThat(valueStreamMap.getCurrentPipeline().getLevel(),is(0));
  assertThat(gitNode.getLevel(),is(-1));
  assertThat(p1.getLevel(),is(1));
  assertThat(p2.getLevel(),is(1));
  assertThat(p3.getLevel(),is(2));
  assertThat(levelToNodeMap.get(0),contains(valueStreamMap.getCurrentPipeline()));
  assertThat(levelToNodeMap.get(-1),contains(gitNode));
  assertThat(levelToNodeMap.get(1),containsInAnyOrder(p1,p2));
  assertThat(levelToNodeMap.get(2),contains(p3));
}
