{
  HgMaterial hg=new HgMaterial("url",null);
  String[] hg_revs={"h1"};
  scheduleUtil.checkinInOrder(hg,hg_revs);
  String pipelineName="p1";
  String stageName="stage_name";
  Pagination pagination=Pagination.pageStartingAt(0,10,10);
  ScheduleTestUtil.AddedPipeline p1=scheduleUtil.saveConfigWith(pipelineName,stageName,scheduleUtil.m(hg));
  scheduleUtil.runAndPass(p1,"h1");
  Stage stage=stageDao.mostRecentStage(new StageConfigIdentifier(pipelineName,stageName));
  stageDao.findDetailedStageHistoryByOffset(pipelineName,stageName,pagination);
  Method cacheKeyForDetailedStageHistories=getMethodViaReflection("cacheKeyForDetailedStageHistories",String.class,String.class);
  Object primedDetailedStageHistoryPage=goCache.get((String)cacheKeyForDetailedStageHistories.invoke(stageDao,pipelineName,stageName));
  scheduleUtil.runAndPass(p1,"h1");
  stage=stageDao.mostRecentStage(new StageConfigIdentifier(pipelineName,stageName));
  stageDao.findDetailedStageHistoryByOffset(pipelineName,stageName,pagination);
  Object reprimedDetailedStageHistoryPage=goCache.get((String)cacheKeyForDetailedStageHistories.invoke(stageDao,pipelineName,stageName));
  assertThat(reprimedDetailedStageHistoryPage,is(not(sameInstance(primedDetailedStageHistoryPage))));
}
