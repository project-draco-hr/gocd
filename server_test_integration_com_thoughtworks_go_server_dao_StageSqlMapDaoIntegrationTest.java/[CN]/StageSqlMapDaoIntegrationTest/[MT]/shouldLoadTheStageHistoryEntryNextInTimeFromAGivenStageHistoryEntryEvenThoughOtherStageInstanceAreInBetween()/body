{
  HgMaterial hg=new HgMaterial("url",null);
  String[] hg_revs={"h1"};
  scheduleUtil.checkinInOrder(hg,hg_revs);
  String pipelineName="p1";
  String anotherPipeline="p2";
  String stageName="stage_name";
  String anotherStage="another_stage_name";
  ScheduleTestUtil.AddedPipeline p1=scheduleUtil.saveConfigWith(pipelineName,stageName,scheduleUtil.m(hg));
  ScheduleTestUtil.AddedPipeline p2=scheduleUtil.saveConfigWith(anotherPipeline,anotherStage,scheduleUtil.m(hg));
  for (int i=0; i < 11; i++) {
    scheduleUtil.runAndPass(p1,"h1");
    scheduleUtil.runAndPass(p2,"h1");
  }
  StageHistoryPage historyPage=stageDao.findStageHistoryPage(pipelineName,stageName,new FuncVarArg<Pagination,Object>(){
    @Override public Pagination call(    Object... args){
      return Pagination.pageByNumber(2,2,10);
    }
  }
);
  StageHistoryEntry topOfSecondPage=historyPage.getStages().get(0);
  StageHistoryEntry bottomOfFirstPage=stageDao.findImmediateChronologicallyForwardStageHistoryEntry(topOfSecondPage);
  assertThat(bottomOfFirstPage.getId(),is(topOfSecondPage.getId() + 2));
  assertThat(bottomOfFirstPage.getIdentifier().getPipelineName(),is(pipelineName));
  assertThat(bottomOfFirstPage.getIdentifier().getStageName(),is(stageName));
  assertThat(bottomOfFirstPage.getIdentifier().getPipelineCounter(),is(2));
}
