{
  int i=0;
  GitMaterial g1=u.wf(new GitMaterial("git-1"),"folder3");
  u.checkinInOrder(g1,u.d(i++),"g1-1");
  GitMaterial g2=u.wf(new GitMaterial("git-2"),"folder4");
  u.checkinInOrder(g2,u.d(i++),"g2-1");
  GitMaterial g3=u.wf(new GitMaterial("git-3"),"folder5");
  u.checkinInOrder(g3,u.d(i++),"g3-1");
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("P1",u.m(g1),u.m(g2));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("P2",u.m(p1));
  String p1_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,u.d(i++),"g1-1","g2-1");
  String p2_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),p1_1);
  ValueStreamMapPresentationModel graph=valueStreamMapService.getValueStreamMap(pipelineName(p1),1,username,result);
  List<List<Node>> nodesAtEachLevel=graph.getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),0,pipelineName(p2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),0,pipelineName(p1));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
  nodesAtEachLevel=valueStreamMapService.getValueStreamMap(pipelineName(p2),1,username,result).getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),0,pipelineName(p2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),0,pipelineName(p1));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
  u.addMaterialToPipeline(p1,u.m(g3));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("P3",u.m(p1));
  p2=u.addMaterialToPipeline(p2,u.m(p3));
  p2=u.removeMaterialFromPipeline(p2,u.m(p1));
  nodesAtEachLevel=valueStreamMapService.getValueStreamMap(pipelineName(p1),1,username,result).getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(3),0,pipelineName(p2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),0,pipelineName(p3));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),0,pipelineName(p1));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
  nodesAtEachLevel=valueStreamMapService.getValueStreamMap(pipelineName(p2),1,username,result).getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),0,pipelineName(p2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),0,pipelineName(p1));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
  String p1_2=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,u.d(i++),"g1-1","g2-1","g3-1");
  String p3_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p3,u.d(i++),p1_2);
  String p2_2=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),p3_1);
  nodesAtEachLevel=valueStreamMapService.getValueStreamMap(pipelineName(p2),2,username,result).getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(3),0,pipelineName(p2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),0,pipelineName(p3));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),0,pipelineName(p1));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
}
