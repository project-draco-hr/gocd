{
  int i=0;
  GitMaterial g1=u.wf(new GitMaterial("git-1"),"folder3");
  u.checkinInOrder(g1,u.d(i++),"g1-1");
  GitMaterial g2=u.wf(new GitMaterial("git-2"),"folder4");
  u.checkinInOrder(g2,u.d(i++),"g2-1");
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("P2",u.m(g1),u.m(g2));
  ScheduleTestUtil.AddedPipeline c2=u.saveConfigWith("C2",u.m(g1),u.m(g2));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("P3",u.m(p2));
  ScheduleTestUtil.AddedPipeline c3=u.saveConfigWith("C3",u.m(c2));
  ScheduleTestUtil.AddedPipeline c4=u.saveConfigWith("C4",u.m(c3),u.m(p2));
  ScheduleTestUtil.AddedPipeline p4=u.saveConfigWith("P4",u.m(p3),u.m(c2));
  ScheduleTestUtil.AddedPipeline c5=u.saveConfigWith("C5",u.m(p3),u.m(p2),u.m(g1),u.m(p4),u.m(c4),u.m(g2));
  ScheduleTestUtil.AddedPipeline p5=u.saveConfigWith("P5",u.m(c3),u.m(c2),u.m(g1),u.m(p4),u.m(c4),u.m(g2));
  String p2_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),"g1-1","g2-1");
  String c2_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(c2,u.d(i++),"g1-1","g2-1");
  String p3_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p3,u.d(i++),p2_1);
  String c3_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(c3,u.d(i++),c2_1);
  String c4_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(c4,u.d(i++),c3_1,p2_1);
  String p4_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p4,u.d(i++),p3_1,c2_1);
  String c5_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(c5,u.d(i++),p3_1,p2_1,"g1-1",p4_1,c4_1,"g2-1");
  String p5_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p5,u.d(i++),c3_1,c2_1,"g1-1",p4_1,c4_1,"g2-1");
  ValueStreamMapPresentationModel graph=valueStreamMapService.getValueStreamMap(pipelineName(c5),1,username,result);
  List<List<Node>> nodesAtEachLevel=graph.getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(4),0,pipelineName(c5));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(3),4,pipelineName(p4),pipelineName(c4));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),5,pipelineName(p3),pipelineName(c3));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),2,pipelineName(p2),pipelineName(c2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
  VSMTestHelper.assertDepth(graph,pipelineName(c5),1);
  VSMTestHelper.assertDepth(graph,pipelineName(p4),4);
  VSMTestHelper.assertDepth(graph,pipelineName(c4),5);
  VSMTestHelper.assertDepth(graph,pipelineName(p3),2);
  VSMTestHelper.assertDepth(graph,pipelineName(c3),6);
  VSMTestHelper.assertDepth(graph,pipelineName(p2),2);
  VSMTestHelper.assertDepth(graph,pipelineName(c2),4);
  VSMTestHelper.assertDepth(graph,g1.getFingerprint(),1);
  VSMTestHelper.assertDepth(graph,g2.getFingerprint(),2);
  graph=valueStreamMapService.getValueStreamMap(pipelineName(c4),1,username,result);
  nodesAtEachLevel=valueStreamMapService.getValueStreamMap(pipelineName(c4),1,username,result).getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(4),0,pipelineName(c5),pipelineName(p5));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(3),0,pipelineName(c4));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),0,pipelineName(c3),pipelineName(p2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),2,pipelineName(c2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
  VSMTestHelper.assertDepth(graph,pipelineName(p5),1);
  VSMTestHelper.assertDepth(graph,pipelineName(c5),2);
  VSMTestHelper.assertDepth(graph,pipelineName(c4),1);
  VSMTestHelper.assertDepth(graph,pipelineName(c3),1);
  VSMTestHelper.assertDepth(graph,pipelineName(p2),2);
  VSMTestHelper.assertDepth(graph,pipelineName(c2),1);
  VSMTestHelper.assertDepth(graph,g1.getFingerprint(),1);
  VSMTestHelper.assertDepth(graph,g2.getFingerprint(),2);
  nodesAtEachLevel=valueStreamMapService.getValueStreamMap(pipelineName(p3),1,username,result).getNodesAtEachLevel();
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(4),0,pipelineName(c5),pipelineName(p5));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(3),1,pipelineName(p4));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),0,pipelineName(p3));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),0,pipelineName(p2));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint(),g2.getFingerprint());
}
