{
  Username username=UserHelper.getUserName();
  PipelineConfig pipelineConfig=goConfigService.pipelineConfigNamed(new CaseInsensitiveString(pipelineName));
  boolean isAuthorized=securityService.hasOperatePermissionForStage(CaseInsensitiveString.str(pipelineConfig.name()),CaseInsensitiveString.str(pipelineConfig.first().name()),CaseInsensitiveString.str(username.getUsername()));
  if (isAuthorized) {
    LOGGER.debug("start producing manual build cause");
    ServerHealthStateOperationResult result=new ServerHealthStateOperationResult();
    final HashMap<String,String> revisions=new HashMap<String,String>();
    final HashMap<String,String> environmentVariables=new HashMap<String,String>();
    final HashMap<String,String> secureEnvironmentVariables=new HashMap<String,String>();
    buildCauseProducer.manualProduceBuildCauseAndSave(pipelineName,username,new ScheduleOptions(revisions,environmentVariables,secureEnvironmentVariables),result);
    return JsonAction.from(result.getServerHealthState()).respond(response);
  }
 else {
    LOGGER.error(username + " is not authorized to force this pipeline");
    return JsonAction.jsonUnauthorized().respond(response);
  }
}
