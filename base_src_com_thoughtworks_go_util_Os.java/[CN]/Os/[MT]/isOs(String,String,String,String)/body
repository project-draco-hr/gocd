{
  boolean retValue=false;
  if (family != null || name != null || arch != null || version != null) {
    boolean isFamily=true;
    boolean isName=true;
    boolean isArch=true;
    boolean isVersion=true;
    if (family != null) {
      boolean isWindows=OS_NAME.indexOf(FAMILY_WINDOWS) > -1;
      boolean is9x=false;
      boolean isNT=false;
      if (isWindows) {
        is9x=(OS_NAME.indexOf("95") >= 0 || OS_NAME.indexOf("98") >= 0 || OS_NAME.indexOf("me") >= 0 || OS_NAME.indexOf("ce") >= 0);
        isNT=!is9x;
      }
      if (family.equals(FAMILY_WINDOWS)) {
        isFamily=isWindows;
      }
 else       if (family.equals(FAMILY_9X)) {
        isFamily=isWindows && is9x;
      }
 else       if (family.equals(FAMILY_NT)) {
        isFamily=isWindows && isNT;
      }
 else       if (family.equals(FAMILY_OS2)) {
        isFamily=OS_NAME.indexOf(FAMILY_OS2) > -1;
      }
 else       if (family.equals(FAMILY_NETWARE)) {
        isFamily=OS_NAME.indexOf(FAMILY_NETWARE) > -1;
      }
 else       if (family.equals(FAMILY_DOS)) {
        isFamily=PATH_SEP.equals(";") && !isFamily(FAMILY_NETWARE);
      }
 else       if (family.equals(FAMILY_MAC)) {
        isFamily=OS_NAME.indexOf(FAMILY_MAC) > -1;
      }
 else       if (family.equals(FAMILY_TANDEM)) {
        isFamily=OS_NAME.indexOf("nonstop_kernel") > -1;
      }
 else       if (family.equals(FAMILY_UNIX)) {
        isFamily=PATH_SEP.equals(":") && !isFamily(FAMILY_VMS) && (!isFamily(FAMILY_MAC) || OS_NAME.endsWith("x"));
      }
 else       if (family.equals(FAMILY_ZOS)) {
        isFamily=OS_NAME.indexOf(FAMILY_ZOS) > -1 || OS_NAME.indexOf("os/390") > -1;
      }
 else       if (family.equals(FAMILY_OS400)) {
        isFamily=OS_NAME.indexOf(FAMILY_OS400) > -1;
      }
 else       if (family.equals(FAMILY_VMS)) {
        isFamily=OS_NAME.indexOf(FAMILY_VMS) > -1;
      }
 else {
        throw new RuntimeException("Don\'t know how to detect os family \"" + family + "\"");
      }
    }
    if (name != null) {
      isName=name.equals(OS_NAME);
    }
    if (arch != null) {
      isArch=arch.equals(OS_ARCH);
    }
    if (version != null) {
      isVersion=version.equals(OS_VERSION);
    }
    retValue=isFamily && isName && isArch&& isVersion;
  }
  return retValue;
}
