{
  String p1="p1";
  String p2="p2";
  String p3="p3";
  GitMaterial g1=new GitMaterial("g1");
  GitMaterial g2=new GitMaterial("g2");
  BuildCause p1buildCause=createBuildCause(new ArrayList<String>(),asList(g1));
  BuildCause p3buildCause=createBuildCause(asList(p1),asList(g2));
  BuildCause p2buildCause=createBuildCause(asList(p1,p3),Arrays.<GitMaterial>asList());
  when(pipelineService.buildCauseFor(p1,1)).thenReturn(p1buildCause);
  when(pipelineService.buildCauseFor(p2,1)).thenReturn(p2buildCause);
  when(pipelineService.buildCauseFor(p3,1)).thenReturn(p3buildCause);
  PipelineConfig p1Config=PipelineConfigMother.pipelineConfig(p1,new MaterialConfigs(g1.config()));
  PipelineConfig p3Config=PipelineConfigMother.pipelineConfig(p3,new MaterialConfigs(g2.config(),new DependencyMaterialConfig(p1Config.name(),p1Config.getFirstStageConfig().name())));
  PipelineConfig p2Config=PipelineConfigMother.pipelineConfig(p2,new MaterialConfigs(new DependencyMaterialConfig(p1Config.name(),p1Config.getFirstStageConfig().name()),new DependencyMaterialConfig(p3Config.name(),p3Config.getFirstStageConfig().name())));
  CruiseConfig cruiseConfig=new BasicCruiseConfig(new BasicPipelineConfigs(p1Config,p2Config,p3Config));
  when(goConfigService.currentCruiseConfig()).thenReturn(cruiseConfig);
  when(pipelineService.findPipelineByCounterOrLabel(p2,"1")).thenReturn(new Pipeline(p2,"p2-label",p2buildCause));
  ValueStreamMapPresentationModel graph=valueStreamMapService.getValueStreamMap(p2,1,user,result);
  List<List<Node>> nodesAtEachLevel=graph.getNodesAtEachLevel();
  assertThat(nodesAtEachLevel.size(),is(4));
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(0),0,g1.getFingerprint());
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(1),0,p1,g2.getFingerprint());
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(2),1,p3);
  VSMTestHelper.assertThatLevelHasNodes(nodesAtEachLevel.get(3),0,p2);
}
