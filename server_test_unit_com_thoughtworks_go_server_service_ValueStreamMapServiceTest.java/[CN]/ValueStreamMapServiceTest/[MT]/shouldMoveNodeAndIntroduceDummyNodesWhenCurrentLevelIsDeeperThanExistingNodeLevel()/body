{
  GitMaterial git=new GitMaterial("git");
  MaterialConfig gitConfig=git.config();
  String p1="p1";
  String p2="p2";
  String p3="p3";
  BuildCause p3buildCause=createBuildCause(asList(p1,p2),new ArrayList<GitMaterial>());
  BuildCause p2buildCause=createBuildCause(asList(p1),asList(git));
  BuildCause p1buildCause=createBuildCause(new ArrayList<String>(),asList(git));
  when(pipelineService.buildCauseFor(p3,1)).thenReturn(p3buildCause);
  when(pipelineService.buildCauseFor(p2,1)).thenReturn(p2buildCause);
  when(pipelineService.buildCauseFor(p1,1)).thenReturn(p1buildCause);
  PipelineConfig p1Config=PipelineConfigMother.pipelineConfig(p1,new MaterialConfigs(gitConfig));
  PipelineConfig p2Config=PipelineConfigMother.pipelineConfig(p2,new MaterialConfigs(gitConfig,new DependencyMaterialConfig(p1Config.name(),p1Config.getFirstStageConfig().name())));
  PipelineConfig p3Config=PipelineConfigMother.pipelineConfig(p3,new MaterialConfigs(new DependencyMaterialConfig(p1Config.name(),p1Config.getFirstStageConfig().name()),new DependencyMaterialConfig(p2Config.name(),p2Config.getFirstStageConfig().name())));
  CruiseConfig cruiseConfig=new CruiseConfig(new PipelineConfigs(p1Config,p2Config,p3Config));
  when(goConfigService.currentCruiseConfig()).thenReturn(cruiseConfig);
  when(pipelineService.findPipelineByCounterOrLabel("p3","1")).thenReturn(new Pipeline("p3","p3-label",p3buildCause));
  ValueStreamMapPresentationModel graph=valueStreamMapService.getValueStreamMap(p3,1,user,result);
  List<List<Node>> nodesAtEachLevel=graph.getNodesAtEachLevel();
  assertThat(graph.getCurrentPipeline().getName(),is(p3));
  assertThat(nodesAtEachLevel.size(),is(4));
  List<Node> firstLevel=nodesAtEachLevel.get(0);
  assertThat(firstLevel.size(),is(1));
  assertLayerHasNode(firstLevel,git.getDisplayName(),git.getFingerprint(),p1);
  List<Node> secondLevel=nodesAtEachLevel.get(1);
  assertThat(secondLevel.size(),is(2));
  assertLayerHasNode(secondLevel,p1,p1,p2);
  assertLayerHasDummyNodeWithDependents(secondLevel,p2);
  List<Node> thirdLevel=nodesAtEachLevel.get(2);
  assertThat(thirdLevel.size(),is(2));
  assertLayerHasNode(thirdLevel,p2,p2,p3);
  assertLayerHasDummyNodeWithDependents(thirdLevel,p3);
  List<Node> fourthLevel=nodesAtEachLevel.get(3);
  assertThat(fourthLevel.size(),is(1));
  assertLayerHasNode(fourthLevel,p3,p3);
}
