{
  GitMaterial gitMaterial=new GitMaterial("git");
  MaterialConfig gitConfig=gitMaterial.config();
  GitMaterialInstance gitMaterialInstance=new GitMaterialInstance("git","master","submodule","flyweight");
  BuildCause p3buildCause=createBuildCause(asList("p1","p2"),new ArrayList<GitMaterial>());
  BuildCause p2buildCause=createBuildCause(new ArrayList<String>(),asList(gitMaterial));
  Modification gitModification=p2buildCause.getMaterialRevisions().getRevisions().get(0).getModifications().get(0);
  String gitRevision=gitModification.getRevision();
  BuildCause p1buildCause=createBuildCause(new ArrayList<String>(),asList(gitMaterial));
  when(pipelineService.buildCauseFor("p3",1)).thenReturn(p3buildCause);
  when(pipelineService.buildCauseFor("p2",1)).thenReturn(p2buildCause);
  when(pipelineService.buildCauseFor("p1",1)).thenReturn(p1buildCause);
  PipelineConfig p1Config=PipelineConfigMother.pipelineConfig("p1",new MaterialConfigs(gitConfig));
  PipelineConfig p2Config=PipelineConfigMother.pipelineConfig("p2",new MaterialConfigs(gitConfig));
  PipelineConfig p3Config=PipelineConfigMother.pipelineConfig("p3",new MaterialConfigs(new DependencyMaterialConfig(p1Config.name(),p1Config.getFirstStageConfig().name()),new DependencyMaterialConfig(p2Config.name(),p2Config.getFirstStageConfig().name())));
  PipelineConfigs pipelineConfigs=new PipelineConfigs("g1",new Authorization(),p1Config,p2Config,p3Config);
  CruiseConfig cruiseConfig=new CruiseConfig(pipelineConfigs);
  when(goConfigService.groups()).thenReturn(new PipelineGroups(pipelineConfigs));
  when(materialRepository.findMaterialInstance(gitConfig)).thenReturn(gitMaterialInstance);
  when(materialRepository.getModificationFor(gitMaterialInstance,gitRevision)).thenReturn(gitModification);
  when(goConfigService.currentCruiseConfig()).thenReturn(cruiseConfig);
  ValueStreamMapPresentationModel graph=valueStreamMapService.getValueStreamMap(gitMaterial.getFingerprint(),gitRevision,user,result);
  List<List<Node>> nodesAtEachLevel=graph.getNodesAtEachLevel();
  assertThat(graph.getCurrentPipeline(),is(nullValue()));
  assertThat(graph.getCurrentMaterial().getId(),is(gitMaterial.getFingerprint()));
  assertThat(nodesAtEachLevel.size(),is(3));
  List<Node> firstLevel=nodesAtEachLevel.get(0);
  assertThat(firstLevel.size(),is(1));
  assertNode(0,firstLevel.get(0),gitMaterial.getDisplayName(),gitMaterial.getFingerprint(),0,"p1","p2");
  assertDepth(graph,firstLevel.get(0).getId(),1);
  List<Node> secondLevel=nodesAtEachLevel.get(1);
  assertThat(secondLevel.size(),is(2));
  assertNode(1,secondLevel.get(0),"p1","p1",0,"p3");
  assertDepth(graph,secondLevel.get(0).getId(),1);
  assertNode(1,secondLevel.get(1),"p2","p2",0,"p3");
  assertDepth(graph,secondLevel.get(1).getId(),2);
  List<Node> thirdLevel=nodesAtEachLevel.get(2);
  assertThat(thirdLevel.size(),is(1));
  assertNode(2,thirdLevel.get(0),"p3","p3",0);
  assertDepth(graph,thirdLevel.get(0).getId(),1);
}
