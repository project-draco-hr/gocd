{
  Users users=userService.findValidSubscribers(stageIdentifier.stageConfigIdentifier());
  if (users.isEmpty()) {
    return;
  }
  Stage stage=stageService.findStageWithIdentifier(stageIdentifier);
  Pipeline pipeline=pipelineService.fullPipelineById(stage.getPipelineId());
  MaterialRevisions materialRevisions=pipeline.getMaterialRevisions();
  List<TestSuite> failedTestSuites=null;
  String shineEnabled=systemEnvironment.getEnvironmentVariable("SHINE_ENABLED");
  if (shineEnabled != null && !"false".equalsIgnoreCase(shineEnabled)) {
    failedTestSuites=shineDao.failedTestsFor(stageIdentifier);
  }
  String emailBody=new EmailBodyGenerator(materialRevisions,cancelledBy,systemEnvironment,stageIdentifier,failedTestSuites).getContent();
  String subject="Stage [" + stageIdentifier.stageLocator() + "]"+ event.describe();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format("Processing notification titled [%s]",subject));
  }
  for (  User user : users) {
    if (user.matchNotification(stageIdentifier.stageConfigIdentifier(),event,materialRevisions)) {
      StringBuilder emailWithSignature=new StringBuilder(emailBody).append("\n\n").append("Sent by Go on behalf of ").append(user.getName());
      SendEmailMessage sendEmailMessage=new SendEmailMessage(subject,emailWithSignature.toString(),user.getEmail());
      emailNotificationTopic.post(sendEmailMessage);
    }
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format("Finished processing notification titled [%s]",subject));
  }
}
