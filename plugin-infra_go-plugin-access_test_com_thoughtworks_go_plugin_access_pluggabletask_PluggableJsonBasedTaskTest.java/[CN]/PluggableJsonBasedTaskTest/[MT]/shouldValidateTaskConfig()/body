{
  String jsonResponse="{\"errors\":[{\"key\":\"key1\", \"message\":\"err1\"},{\"key\":\"key1\", \"message\":\"err2\"},{\"key\":\"key2\", \"message\":\"err3\"}]}";
  String config="[{\"display-name\":\"URL\",\"secure\":false,\"value\":\"http://foo\",\"display-order\":\"0\",\"required\":true,\"key\":\"URL\"}]";
  when(goPluginApiResponse.responseBody()).thenReturn(jsonResponse);
  TaskConfig configuration=new TaskConfig();
  final TaskConfigProperty property=new TaskConfigProperty("URL","http://foo");
  property.with(Property.SECURE,false);
  property.with(Property.REQUIRED,true);
  property.with(Property.DISPLAY_NAME,"URL");
  property.with(Property.DISPLAY_ORDER,0);
  configuration.add(property);
  ValidationResult result=task.validate(configuration);
  assertThat(result.isSuccessful(),is(false));
  assertThat(result.getErrors().get(0).getKey(),is("key1"));
  assertThat(result.getErrors().get(0).getMessage(),is("err1"));
  assertThat(result.getErrors().get(1).getKey(),is("key1"));
  assertThat(result.getErrors().get(1).getMessage(),is("err2"));
  assertThat(result.getErrors().get(2).getKey(),is("key2"));
  assertThat(result.getErrors().get(2).getMessage(),is("err3"));
  ArgumentCaptor<GoPluginApiRequest> argument=ArgumentCaptor.forClass(GoPluginApiRequest.class);
  verify(pluginManager).submitTo(eq(pluginId),argument.capture());
  assertThat(argument.getValue().requestParameters().containsKey("config"),is(true));
  assertThat((String)argument.getValue().requestParameters().get("config"),is(config));
  MatcherAssert.assertThat(argument.getValue().extension(),Matchers.is(PluggableJsonBasedTask.TASK_EXTENSION));
  MatcherAssert.assertThat(argument.getValue().extensionVersion(),Matchers.is(PluggableJsonBasedTask.VERSION_1));
  MatcherAssert.assertThat(argument.getValue().requestName(),Matchers.is(PluggableJsonBasedTask.VALIDATION_REQUEST));
}
