{
  NamedNodeMap attrs=element.getAttributes();
  if (!canonical) {
    if (attrs == null || attrs.getLength() == 0)     return new Attr[0];
    Attr[] attrsAndNamespaces=new Attr[attrs.getLength()];
    for (int i=0; i < attrs.getLength(); i++) {
      attrsAndNamespaces[i]=(Attr)attrs.item(i);
    }
    return attrsAndNamespaces;
  }
 else {
    List<Attr> namespaces=new ArrayList<Attr>();
    List<Attr> attributes=new ArrayList<Attr>();
    if (subsets) {
      getAttrsOfAncestors(element.getParentNode(),namespaces,attributes);
      Attr[] namespaceOfAncestors=getSortedArray(namespaces);
      Attr[] attributeOfAncestors=getSortedArray(attributes);
      c14nNamespaceStack.push(namespaceOfAncestors);
      c14nAttrStack.push(attributeOfAncestors);
      subsets=false;
    }
    getNamespacesAndAttrs(element,namespaces,attributes);
    Attr[] namespaceArray=getSortedArray(namespaces);
    Attr[] attributeArray=getSortedArray(attributes);
    Attr[] allAttrs=new Attr[namespaceArray.length + attributeArray.length];
    for (int i=0; i < allAttrs.length; i++) {
      if (i < namespaceArray.length) {
        allAttrs[i]=namespaceArray[i];
      }
 else {
        allAttrs[i]=attributeArray[i - namespaceArray.length];
      }
    }
    c14nNamespaceStack.push(namespaceArray);
    c14nAttrStack.push(attributeArray);
    return allAttrs;
  }
}
