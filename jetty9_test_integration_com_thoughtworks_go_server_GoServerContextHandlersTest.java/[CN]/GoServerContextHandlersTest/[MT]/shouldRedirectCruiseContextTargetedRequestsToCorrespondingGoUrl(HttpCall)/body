{
  HttpChannel<?> channel=mock(HttpChannel.class);
  Request request=new Request(channel,mock(HttpInput.class));
  request.setPathInfo("/cruise" + httpCall.url);
  request.setScheme("http");
  request.setServerName("go-server");
  request.setServerPort(1234);
  request.setDispatcherType(DispatcherType.REQUEST);
  HttpConfiguration httpConfiguration=mock(HttpConfiguration.class);
  when(httpConfiguration.getOutputBufferSize()).thenReturn(1000);
  when(channel.getHttpConfiguration()).thenReturn(httpConfiguration);
  HttpOutput httpOutput=mock(HttpOutput.class);
  ArgumentCaptor<byte[]> argumentCaptor=ArgumentCaptor.forClass(byte[].class);
  Response response=new Response(channel,httpOutput);
  when(channel.getRequest()).thenReturn(request);
  when(channel.getResponse()).thenReturn(response);
  server.start();
  jetty9Server.getServer().handle(channel);
  assertThat(response.getStatus(),is(httpCall.expectedResponse));
  if (httpCall.shouldRedirect) {
    assertThat(response.getHeader("Location"),is("http://go-server:1234" + "/go" + httpCall.url));
  }
  assertThat(response.getHeader(HttpHeaders.CONTENT_TYPE).contains("text/plain"),is(true));
  verify(httpOutput).write(argumentCaptor.capture(),any(Integer.class),any(Integer.class));
  assertThat(new String(argumentCaptor.getValue()).trim(),is("Url(s) starting in '/cruise' have been permanently moved to '/go', please use the new path."));
}
