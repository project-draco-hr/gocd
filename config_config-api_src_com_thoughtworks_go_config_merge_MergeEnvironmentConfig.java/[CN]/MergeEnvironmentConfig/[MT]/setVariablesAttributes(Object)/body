{
  if (variablesAttributes != null) {
    List<Map> variableAttributes=(List)variablesAttributes;
    List<EnvironmentVariableConfig> newProposed=new ArrayList<>();
    for (    Map attributeMap : variableAttributes) {
      EnvironmentVariableConfig environmentVariableConfig=new EnvironmentVariableConfig(new GoCipher());
      try {
        environmentVariableConfig.setConfigAttributes(attributeMap);
        newProposed.add(environmentVariableConfig);
      }
 catch (      IllegalArgumentException e) {
        continue;
      }
    }
    List<EnvironmentVariableConfig> removals=new ArrayList<>();
    List<EnvironmentVariableConfig> changes=new ArrayList<>();
    List<EnvironmentVariableConfig> nochanges=new ArrayList<>();
    for (    EnvironmentConfig part : this) {
      for (      EnvironmentVariableConfig existingVariable : part.getVariables()) {
        boolean found=false;
        for (        EnvironmentVariableConfig var : newProposed) {
          if (var.getName().equals(existingVariable.getName())) {
            if (!var.getValue().equals(existingVariable.getValue())) {
              if (!isEditable(part))               throw bomb(String.format("Cannot change variable %s in environment %s because it is defined in non-editable source %s",existingVariable.getName(),this.name(),part.getOrigin()));
              if (!changes.contains(var)) {
                changes.add(var);
                removals.add(existingVariable);
              }
            }
 else {
              if (!nochanges.contains(var))               nochanges.add(var);
            }
            found=true;
          }
        }
        if (!found) {
          if (!isEditable(part))           throw bomb(String.format("Cannot remove variable %s from environment %s because it is defined in non-editable source %s",existingVariable.getName(),this.name(),part.getOrigin()));
          removals.add(existingVariable);
        }
      }
    }
    for (    EnvironmentVariableConfig noChange : nochanges) {
      newProposed.remove(noChange);
    }
    for (    EnvironmentVariableConfig noChange : changes) {
      newProposed.remove(noChange);
    }
    for (    EnvironmentVariableConfig toRemove : removals) {
      for (      EnvironmentConfig part : this) {
        part.getVariables().remove(toRemove);
      }
    }
    this.getFirstEditablePart().getVariables().addAll(changes);
    this.getFirstEditablePart().getVariables().addAll(newProposed);
  }
}
