{
  RubyModule klass;
  XmlDomParserContext ctx;
  InputStream istream;
  XmlDocument document;
  IRubyObject d=document(context);
  Ruby runtime=context.getRuntime();
  if (d != null && d instanceof XmlDocument) {
    document=(XmlDocument)d;
  }
 else {
    return runtime.getNil();
  }
  if (document instanceof HtmlDocument) {
    klass=getNokogiriClass(runtime,"Nokogiri::HTML::Document");
    ctx=new HtmlDomParserContext(runtime,options);
    ((HtmlDomParserContext)ctx).enableDocumentFragment();
    istream=new ByteArrayInputStream((rubyStringToString(str)).getBytes());
  }
 else   if (document instanceof XmlDocument) {
    klass=getNokogiriClass(runtime,"Nokogiri::XML::Document");
    ctx=new XmlDomParserContext(runtime,options);
    String input=rubyStringToString(str);
    istream=new ByteArrayInputStream(input.getBytes());
  }
 else {
    return runtime.getNil();
  }
  ctx.setInputSource(istream);
  XmlDocument doc=ctx.parse(context,klass,runtime.getNil());
  RubyArray documentErrors=getErrorArray(document);
  RubyArray docErrors=getErrorArray(doc);
  if (isErrorIncreased(documentErrors,docErrors)) {
    for (int i=0; i < docErrors.getLength(); i++) {
      documentErrors.add(docErrors.get(i));
    }
    document.setInstanceVariable("@errors",documentErrors);
    XmlNodeSet xmlNodeSet=XmlNodeSet.newXmlNodeSet(context,RubyArray.newArray(runtime));
    return xmlNodeSet;
  }
  Node first;
  if (doc.node.getFirstChild().getNodeType() == Node.DOCUMENT_TYPE_NODE) {
    first=doc.node.getFirstChild().getNextSibling();
  }
 else {
    first=doc.node.getFirstChild();
  }
  RubyArray nodeArray=RubyArray.newArray(runtime);
  nodeArray.add(NokogiriHelpers.getCachedNodeOrCreate(runtime,first));
  XmlNodeSet xmlNodeSet=XmlNodeSet.newXmlNodeSet(context,nodeArray);
  return xmlNodeSet;
}
