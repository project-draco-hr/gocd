{
  XmlNode other=asXmlNode(context,other_);
  if (this.doc != null) {
    other.setDocument(context,this.doc);
  }
  IRubyObject nodeOrTags=other;
  Node thisNode=node;
  Node otherNode=other.node;
  try {
    Document prev=otherNode.getOwnerDocument();
    Document doc=thisNode.getOwnerDocument();
    if (doc != null && doc != otherNode.getOwnerDocument()) {
      Node ret=doc.adoptNode(otherNode);
      fixUserData(prev,ret);
      if (ret == null) {
        throw context.getRuntime().newRuntimeError("Failed to take ownership of node");
      }
      otherNode=ret;
    }
    Node parent=thisNode.getParentNode();
switch (scheme) {
case CHILD:
      Node[] children=adoptAsChild(context,thisNode,otherNode);
    if (children.length == 1 && otherNode == children[0]) {
      break;
    }
 else {
      nodeOrTags=nodeArrayToRubyArray(context.getRuntime(),children);
    }
  break;
case PREV_SIBLING:
adoptAsPrevSibling(context,parent,thisNode,otherNode);
break;
case NEXT_SIBLING:
adoptAsNextSibling(context,parent,thisNode,otherNode);
break;
case REPLACEMENT:
adoptAsReplacement(context,parent,thisNode,otherNode);
break;
}
}
 catch (Exception e) {
throw context.getRuntime().newRuntimeError(e.toString());
}
if (otherNode.getNodeType() == Node.TEXT_NODE) {
coalesceTextNodes(context,other,scheme);
}
relink_namespace(context);
return nodeOrTags;
}
