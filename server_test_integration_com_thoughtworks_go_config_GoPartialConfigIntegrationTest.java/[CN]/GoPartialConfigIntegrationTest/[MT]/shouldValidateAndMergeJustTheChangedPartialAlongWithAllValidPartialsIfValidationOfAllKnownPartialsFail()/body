{
  goPartialConfig.onSuccessPartialConfig(repoConfig1,PartialConfigMother.withPipeline("p1_repo1",new RepoConfigOrigin(repoConfig1,"1")));
  assertThat(goConfigDao.loadConfigHolder().config.getAllPipelineNames().contains(new CaseInsensitiveString("p1_repo1")),is(true));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1.getMaterialConfig().getFingerprint())).isEmpty(),is(true));
  final String invalidPipelineInPartial="p1_repo1_invalid";
  PartialConfig invalidPartial=PartialConfigMother.invalidPartial(invalidPipelineInPartial,new RepoConfigOrigin(repoConfig1,"2"));
  goPartialConfig.onSuccessPartialConfig(repoConfig1,invalidPartial);
  assertThat(findPartial(invalidPipelineInPartial,cachedGoPartials.lastValidPartials()),is(nullValue()));
  assertThat(findPartial(invalidPipelineInPartial,cachedGoPartials.lastKnownPartials()),is(invalidPartial));
  assertThat(goConfigDao.loadConfigHolder().config.getAllPipelineNames().contains(new CaseInsensitiveString(invalidPipelineInPartial)),is(false));
  List<ServerHealthState> serverHealthStatesForRepo1=serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1));
  assertThat(serverHealthStatesForRepo1.isEmpty(),is(false));
  assertThat(serverHealthStatesForRepo1.get(0).getLogLevel(),is(HealthStateLevel.ERROR));
  goPartialConfig.onSuccessPartialConfig(repoConfig2,PartialConfigMother.withPipeline("p2_repo2",new RepoConfigOrigin(repoConfig2,"1")));
  assertThat(findPartial(invalidPipelineInPartial,cachedGoPartials.lastValidPartials()),is(nullValue()));
  assertThat(findPartial(invalidPipelineInPartial,cachedGoPartials.lastKnownPartials()),is(invalidPartial));
  assertThat(goConfigDao.loadConfigHolder().config.getAllPipelineNames().contains(new CaseInsensitiveString("p1_repo1")),is(true));
  assertThat(goConfigDao.loadConfigHolder().config.getAllPipelineNames().contains(new CaseInsensitiveString("p2_repo2")),is(true));
  assertThat(goConfigDao.loadConfigHolder().config.getAllPipelineNames().contains(new CaseInsensitiveString(invalidPipelineInPartial)),is(false));
  serverHealthStatesForRepo1=serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1));
  assertThat(serverHealthStatesForRepo1.isEmpty(),is(false));
  assertThat(serverHealthStatesForRepo1.get(0).getLogLevel(),is(HealthStateLevel.ERROR));
  List<ServerHealthState> serverHealthStatesForRepo2=serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig2));
  assertThat(serverHealthStatesForRepo2.isEmpty(),is(true));
}
