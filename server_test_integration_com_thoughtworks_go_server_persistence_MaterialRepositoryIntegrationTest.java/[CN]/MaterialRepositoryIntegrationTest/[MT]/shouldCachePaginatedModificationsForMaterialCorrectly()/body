{
  final ScmMaterial material=material();
  MaterialInstance materialInstance=material.createMaterialInstance();
  repo.saveOrUpdate(materialInstance);
  MaterialRevision first=saveOneScmModification("1",material,"user1","1.txt","comment1");
  MaterialRevision second=saveOneScmModification("2",material,"user2","2.txt","comment2");
  MaterialRevision third=saveOneScmModification("3",material,"user3","3.txt","comment3");
  MaterialRevision fourth=saveOneScmModification("4",material,"user4","4.txt","comment4");
  MaterialRevision fifth=saveOneScmModification("5",material,"user5","5.txt","comment5");
  Pagination page=Pagination.pageStartingAt(0,5,3);
  repo.getModificationsFor(materialInstance,page);
  Modifications modificationsFromCache=(Modifications)goCache.get(repo.materialModificationsWithPaginationKey(materialInstance),repo.materialModificationsWithPaginationSubKey(page));
  assertThat(modificationsFromCache.size(),is(3));
  assertThat(modificationsFromCache.get(0).getRevision(),is(fifth.getLatestRevisionString()));
  assertThat(modificationsFromCache.get(1).getRevision(),is(fourth.getLatestRevisionString()));
  assertThat(modificationsFromCache.get(2).getRevision(),is(third.getLatestRevisionString()));
  page=Pagination.pageStartingAt(1,5,3);
  repo.getModificationsFor(materialInstance,page);
  modificationsFromCache=(Modifications)goCache.get(repo.materialModificationsWithPaginationKey(materialInstance),repo.materialModificationsWithPaginationSubKey(page));
  assertThat(modificationsFromCache.size(),is(3));
  assertThat(modificationsFromCache.get(0).getRevision(),is(fourth.getLatestRevisionString()));
  assertThat(modificationsFromCache.get(1).getRevision(),is(third.getLatestRevisionString()));
  assertThat(modificationsFromCache.get(2).getRevision(),is(second.getLatestRevisionString()));
  page=Pagination.pageStartingAt(3,5,3);
  repo.getModificationsFor(materialInstance,page);
  modificationsFromCache=(Modifications)goCache.get(repo.materialModificationsWithPaginationKey(materialInstance),repo.materialModificationsWithPaginationSubKey(page));
  assertThat(modificationsFromCache.size(),is(2));
  assertThat(modificationsFromCache.get(0).getRevision(),is(second.getLatestRevisionString()));
  assertThat(modificationsFromCache.get(1).getRevision(),is(first.getLatestRevisionString()));
  final Modification modOne=new Modification("user","comment","email@gmail.com",new Date(),"123");
  transactionTemplate.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status){
      MaterialInstance foo=repo.findOrCreateFrom(material);
      repo.saveModifications(foo,Arrays.asList(modOne));
    }
  }
);
  modificationsFromCache=(Modifications)goCache.get(repo.materialModificationsWithPaginationKey(materialInstance),repo.materialModificationsWithPaginationSubKey(Pagination.pageStartingAt(0,5,3)));
  assertThat(modificationsFromCache,is(nullValue()));
  modificationsFromCache=(Modifications)goCache.get(repo.materialModificationsWithPaginationKey(materialInstance),repo.materialModificationsWithPaginationSubKey(Pagination.pageStartingAt(3,5,3)));
  assertThat(modificationsFromCache,is(nullValue()));
}
