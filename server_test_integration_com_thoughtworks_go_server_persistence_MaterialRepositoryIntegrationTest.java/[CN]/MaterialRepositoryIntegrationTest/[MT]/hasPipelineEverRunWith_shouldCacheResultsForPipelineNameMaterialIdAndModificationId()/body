{
  HgMaterial hgMaterial=MaterialsMother.hgMaterial("hgUrl","dest");
  MaterialRevision materialRevision=saveOneScmModification(hgMaterial,"user","file");
  PipelineConfig pipelineConfig=PipelineMother.createPipelineConfig("mingle",new MaterialConfigs(hgMaterial.config()),"dev");
  MaterialRevisions materialRevisions=new MaterialRevisions(materialRevision);
  Pipeline pipeline=instanceFactory.createPipelineInstance(pipelineConfig,BuildCause.createManualForced(materialRevisions,Username.ANONYMOUS),new DefaultSchedulingContext(DEFAULT_APPROVED_BY),md5,new TimeProvider());
  GoCache spyGoCache=spy(goCache);
  when(spyGoCache.get(any(String.class))).thenCallRealMethod();
  Mockito.doCallRealMethod().when(spyGoCache).put(any(String.class),any(Object.class));
  repo=new MaterialRepository(sessionFactory,spyGoCache,2,transactionSynchronizationManager,materialConfigConverter,materialExpansionService,databaseStrategy);
  pipelineSqlMapDao.save(pipeline);
  MaterialRevisions revisions=new MaterialRevisions(new MaterialRevision(hgMaterial,materialRevision.getLatestModification()));
  assertThat("should hit the db and cache it",repo.hasPipelineEverRunWith("mingle",revisions),is(true));
  assertThat("should have cached the result on the previous call",repo.hasPipelineEverRunWith("mingle",revisions),is(true));
  verify(spyGoCache,times(1)).put(any(String.class),eq(Boolean.TRUE));
}
