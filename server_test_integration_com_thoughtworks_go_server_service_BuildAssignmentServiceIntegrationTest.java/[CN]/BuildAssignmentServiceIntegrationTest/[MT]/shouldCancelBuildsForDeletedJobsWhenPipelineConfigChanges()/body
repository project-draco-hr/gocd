{
  buildAssignmentService.initialize();
  fixture=new PipelineWithTwoStages(materialRepository,transactionTemplate).usingTwoJobs();
  fixture.usingConfigHelper(configHelper).usingDbHelper(dbHelper).onSetUp();
  fixture.createPipelineWithFirstStageScheduled();
  buildAssignmentService.onTimer();
  PipelineConfig pipelineConfig=new Cloner().deepClone(configHelper.getCachedGoConfig().currentConfig().getPipelineConfigByName(new CaseInsensitiveString(fixture.pipelineName)));
  StageConfig devStage=pipelineConfig.findBy(new CaseInsensitiveString(fixture.devStage));
  devStage.getJobs().remove(devStage.jobConfigByConfigName(new CaseInsensitiveString(fixture.JOB_FOR_DEV_STAGE)));
  pipelineConfigService.updatePipelineConfig(loserUser,pipelineConfig,pipelineConfigMD5,new HttpLocalizedOperationResult());
  Pipeline pipeline=pipelineDao.mostRecentPipeline(fixture.pipelineName);
  JobInstance deletedJob=pipeline.getFirstStage().getJobInstances().getByName(fixture.JOB_FOR_DEV_STAGE);
  assertThat(deletedJob.getState(),is(JobState.Completed));
  assertThat(deletedJob.getResult(),is(JobResult.Cancelled));
  JobInstance retainedJob=pipeline.getFirstStage().getJobInstances().getByName(fixture.DEV_STAGE_SECOND_JOB);
  assertThat(retainedJob.getState(),is(JobState.Scheduled));
  assertThat(retainedJob.getResult(),is(JobResult.Unknown));
}
