{
  final PluggableSCMMaterial material=MaterialsMother.pluggableSCMMaterial();
  final MaterialInstance materialInstance=material.createMaterialInstance();
  Map<String,String> oldData=new HashMap<String,String>();
  oldData.put("k1","v1");
  materialInstance.setAdditionalData(new GsonBuilder().create().toJson(oldData));
  materialRepository.saveOrUpdate(materialInstance);
  Map<String,String> newData=new HashMap<String,String>(oldData);
  newData.put("k2","v2");
  when(scmExtension.latestModificationSince(any(String.class),any(SCMPropertyConfiguration.class),any(Map.class),any(String.class),any(SCMRevision.class))).thenReturn(new MaterialPollResult(newData,new SCMRevision()));
  mockSCMExtensionInPoller();
  scmMaterialUpdater=new ScmMaterialUpdater(materialRepository,materialChecker,subprocessExecutionContext,materialService,checkoutService);
  pluggableSCMMaterialUpdater=new PluggableSCMMaterialUpdater(materialRepository,scmMaterialUpdater,transactionTemplate);
  transactionTemplate.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus transactionStatus){
      pluggableSCMMaterialUpdater.insertLatestOrNewModifications(material,materialInstance,new File(""),new Modifications(new Modification()));
      return null;
    }
  }
);
  MaterialInstance actualInstance=materialRepository.findMaterialInstance(material);
  assertThat(actualInstance.getAdditionalDataMap(),is(newData));
}
