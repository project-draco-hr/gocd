{
  if (StringUtil.isBlank(CaseInsensitiveString.str(jobName))) {
    errors.add(NAME,"Name is a required field");
  }
 else {
    if ((CaseInsensitiveString.str(jobName).length() > 255 || XmlUtils.doesNotMatchUsingXsdRegex(JOB_NAME_PATTERN_REGEX,CaseInsensitiveString.str(jobName)))) {
      String message=String.format("Invalid job name '%s'. This must be alphanumeric and may contain underscores and periods. The maximum allowed length is %d characters.",jobName,NameTypeValidator.MAX_LENGTH);
      errors.add(NAME,message);
    }
    if (RunOnAllAgentsJobTypeConfig.hasMarker(CaseInsensitiveString.str(jobName))) {
      errors.add(NAME,String.format("A job cannot have '%s' in it's name: %s because it is a reserved keyword",RunOnAllAgentsJobTypeConfig.MARKER,jobName));
    }
    if (RunMultipleInstanceJobTypeConfig.hasMarker(CaseInsensitiveString.str(jobName))) {
      errors.add(NAME,String.format("A job cannot have '%s' in it's name: %s because it is a reserved keyword",RunMultipleInstanceJobTypeConfig.MARKER,jobName));
    }
  }
  if (runInstanceCount != null) {
    try {
      int runInstanceCountForValidation=Integer.parseInt(this.runInstanceCount);
      if (runInstanceCountForValidation < 0) {
        errors().add(RUN_TYPE,"'Run Instance Count' cannot be a negative number as it represents number of instances Go needs to spawn during runtime.");
      }
    }
 catch (    NumberFormatException e) {
      errors().add(RUN_TYPE,"'Run Instance Count' should be a valid positive integer as it represents number of instances Go needs to spawn during runtime.");
    }
  }
  if (isRunOnAllAgents() && isRunMultipleInstanceType()) {
    errors.add(RUN_TYPE,"Job cannot be 'run on all agents' type and 'run multiple instance' type together.");
  }
  if (timeout != null) {
    try {
      double timeoutForValidation=Double.parseDouble(this.timeout);
      if (timeoutForValidation < 0) {
        errors().add(TIMEOUT,"Timeout cannot be a negative number as it represents number of minutes");
      }
    }
 catch (    NumberFormatException e) {
      errors().add(TIMEOUT,"Timeout should be a valid number as it represents number of minutes");
    }
  }
  for (  Resource resource : resources) {
    if (StringUtils.isEmpty(resource.getName())) {
      CaseInsensitiveString pipelineName=validationContext.getPipeline().name();
      CaseInsensitiveString stageName=validationContext.getStage().name();
      String message=String.format("Empty resource name in job \"%s\" of stage \"%s\" of pipeline \"%s\". If a template is used, please ensure that the resource parameters are defined for this pipeline.",jobName,stageName,pipelineName);
      errors.add(RESOURCES,message);
    }
  }
}
