{
  String src=(String)expr.toJava(String.class);
  try {
    if (!handler.isNil()) {
      if (!isContainsPrefix(src)) {
        Set<String> methodNames=handler.getMetaClass().getMethods().keySet();
        for (        String name : methodNames) {
          src=src.replaceAll(name,NokogiriNamespaceContext.NOKOGIRI_PREFIX + ":" + name);
        }
      }
      xpath.setXPathFunctionResolver(NokogiriXPathFunctionResolver.create(handler));
    }
    XPathExpression xpathExpression=xpath.compile(src);
    return node_set(thread_context,xpathExpression);
  }
 catch (  XPathExpressionException xpee) {
    xpee=new XPathExpressionException(src);
    RubyException e=XmlSyntaxError.createXPathSyntaxError(getRuntime(),xpee);
    throw new RaiseException(e);
  }
}
