{
  return (List<PipelineTimelineEntry>)getHibernateTemplate().execute(new HibernateCallback(){
    private static final int PIPELINE_NAME=0;
    private static final int ID=1;
    private static final int COUNTER=2;
    private static final int MODIFIED_TIME=3;
    private static final int FINGERPRINT=4;
    private static final int NATURAL_ORDER=5;
    private static final int REVISION=6;
    private static final int FOLDER=7;
    private static final int MOD_ID=8;
    private static final int PMR_ID=9;
    public Object doInHibernate(    Session session) throws HibernateException, SQLException {
      LOGGER.info("Start updating pipeline timeline");
      List<Object[]> matches=retrieveTimeline(session,pipelineTimeline);
      List<PipelineTimelineEntry> newPipelines=populateFrom(matches);
      updateNaturalOrdering(session,newPipelines);
      LOGGER.info("Pipeline timeline updated");
      return newPipelines;
    }
    private void updateNaturalOrdering(    Session session,    List<PipelineTimelineEntry> pipelines){
      for (      PipelineTimelineEntry pipeline : pipelines) {
        if (pipeline.hasBeenUpdated()) {
          updateNaturalOrderForPipeline(session,pipeline.getId(),pipeline.naturalOrder());
        }
      }
    }
    private List<Object[]> loadTimeline(    SQLQuery query){
      long startedAt=System.currentTimeMillis();
      List<Object[]> matches=(List<Object[]>)query.list();
      long duration=System.currentTimeMillis() - startedAt;
      if (duration > 1000) {
        LOGGER.warn("updating in memory pipeline-timeline took: " + duration + " ms");
      }
      return matches;
    }
    private List<Object[]> retrieveTimeline(    Session session,    PipelineTimeline pipelineTimeline){
      String sql="SELECT CAST(p.name AS VARCHAR), p.id AS p_id, p.counter, m.modifiedtime, " + " (SELECT CAST(materials.fingerprint AS VARCHAR) FROM materials WHERE id = m.materialId), naturalOrder, m.revision, pmr.folder, pmr.toRevisionId AS mod_id, pmr.Id as pmrid " + "FROM pipelines p, pipelinematerialrevisions pmr, modifications m "+ "WHERE p.id = pmr.pipelineid "+ "AND pmr.torevisionid = m.id "+ "AND p.id > ?";
      SQLQuery query=session.createSQLQuery(sql);
      query.setLong(0,pipelineTimeline.maximumId());
      List<Object[]> matches=loadTimeline(query);
      sortTimeLineByPidAndPmrId(matches);
      return matches;
    }
    private void sortTimeLineByPidAndPmrId(    List<Object[]> matches){
      Collections.sort(matches,new Comparator<Object[]>(){
        @Override public int compare(        Object[] m1,        Object[] m2){
          long id1=id(m1);
          long id2=id(m2);
          if (id1 == id2) {
            return (int)(pmrId(m1) - pmrId(m2));
          }
          return (int)(id1 - id2);
        }
      }
);
    }
    private List<PipelineTimelineEntry> populateFrom(    List<Object[]> matches){
      ArrayList<PipelineTimelineEntry> newPipelines=new ArrayList<PipelineTimelineEntry>();
      if (matches.isEmpty()) {
        return newPipelines;
      }
      Map<String,List<PipelineTimelineEntry.Revision>> revisions=new HashMap<String,List<PipelineTimelineEntry.Revision>>();
      String name=null;
      long curId=-1;
      Integer counter=null;
      double naturalOrder=0.0;
      PipelineTimelineEntry entry=null;
      for (int i=0; i < matches.size(); i++) {
        Object[] row=matches.get(i);
        long id=id(row);
        if (curId != id) {
          name=pipelineName(row);
          curId=id;
          counter=counter(row);
          revisions=new HashMap<String,List<PipelineTimelineEntry.Revision>>();
          naturalOrder=naturalOrder(row);
        }
        String fingerprint=fingerprint(row);
        if (!revisions.containsKey(fingerprint)) {
          revisions.put(fingerprint,new ArrayList<PipelineTimelineEntry.Revision>());
        }
        revisions.get(fingerprint).add(rev(row));
        int nextI=i + 1;
        if (((nextI < matches.size() && id(matches.get(nextI)) != curId) || nextI == matches.size())) {
          entry=new PipelineTimelineEntry(name,curId,counter,revisions,naturalOrder);
          newPipelines.add(entry);
          pipelineTimeline.add(entry);
        }
      }
      return newPipelines;
    }
    private String folder(    Object[] row){
      return (String)row[FOLDER];
    }
    private PipelineTimelineEntry.Revision rev(    Object[] row){
      return new PipelineTimelineEntry.Revision(modifiedTime(row),stringRevision(row),folder(row),modId(row));
    }
    private long pmrId(    Object[] row){
      return ((BigInteger)row[PMR_ID]).longValue();
    }
    private long modId(    Object[] row){
      return ((BigInteger)row[MOD_ID]).longValue();
    }
    private double naturalOrder(    Object[] row){
      return (Double)row[NATURAL_ORDER];
    }
    private Date modifiedTime(    Object[] row){
      return (Date)row[MODIFIED_TIME];
    }
    private String stringRevision(    Object[] row){
      return (String)row[REVISION];
    }
    private String fingerprint(    Object[] row){
      return String.valueOf(row[FINGERPRINT]);
    }
    private String pipelineName(    Object[] row){
      return (String)row[PIPELINE_NAME];
    }
    private int counter(    Object[] row){
      return row[COUNTER] == null ? -1 : ((BigInteger)row[COUNTER]).intValue();
    }
    private long id(    Object[] first){
      return ((BigInteger)first[ID]).longValue();
    }
  }
);
}
