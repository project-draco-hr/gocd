{
  String pipelineName="pipeline";
  ServerHealthStateOperationResult result=new ServerHealthStateOperationResult();
  PipelineConfig config=PipelineConfigMother.pipelineConfig(pipelineName);
  Material svnMaterial=MaterialsMother.defaultMaterials().get(0);
  DependencyMaterial dependencyMaterial=new DependencyMaterial(new CaseInsensitiveString("up"),new CaseInsensitiveString("s1"));
  config.materialConfigs().clear();
  config.addMaterialConfig(svnMaterial.config());
  config.addMaterialConfig(dependencyMaterial.config());
  when(pipelineService.getRevisionsBasedOnDependencies(Matchers.<MaterialRevisions>any(),Matchers.<BasicCruiseConfig>any(),Matchers.<CaseInsensitiveString>any())).thenThrow(new NoModificationsPresentForDependentMaterialException("P/1/S/1"));
  when(pipelineScheduleQueue.mostRecentScheduled(pipelineName)).thenReturn(BuildCause.createNeverRun());
  Modification modification=ModificationsMother.checkinWithComment("r","c",new Date(),"f1");
  when(materialRepository.findLatestModification(svnMaterial)).thenReturn(ModificationsMother.createSvnMaterialWithMultipleRevisions(1,modification));
  when(materialRepository.findLatestModification(dependencyMaterial)).thenReturn(new MaterialRevisions(ModificationsMother.changedDependencyMaterialRevision("up",1,"1","s",1,new Date())));
  when(specificMaterialRevisionFactory.create(Matchers.<String>any(),Matchers.<Map<String,String>>any())).thenReturn(MaterialRevisions.EMPTY);
  when(goConfigService.upstreamDependencyGraphOf(Matchers.<String>any(),Matchers.<BasicCruiseConfig>any())).thenReturn(new PipelineConfigDependencyGraph(config));
  MaterialConfigs knownMaterialConfigs=new MaterialConfigs(svnMaterial.config(),dependencyMaterial.config());
  Materials materials=new Materials(svnMaterial,dependencyMaterial);
  when(materialConfigConverter.toMaterials(config.materialConfigs())).thenReturn(materials);
  when(materialExpansionService.expandMaterialConfigsForScheduling(config.materialConfigs())).thenReturn(knownMaterialConfigs);
  when(materialConfigConverter.toMaterials(knownMaterialConfigs)).thenReturn(materials);
  AutoBuild autoBuild=new AutoBuild(goConfigService,pipelineService,pipelineName,new SystemEnvironment(),null,mockServerHealthService);
  ServerHealthState serverHealthState=buildCauseProducerService.newProduceBuildCause(config,autoBuild,result,12345);
  assertThat(serverHealthState.isSuccess(),is(true));
}
