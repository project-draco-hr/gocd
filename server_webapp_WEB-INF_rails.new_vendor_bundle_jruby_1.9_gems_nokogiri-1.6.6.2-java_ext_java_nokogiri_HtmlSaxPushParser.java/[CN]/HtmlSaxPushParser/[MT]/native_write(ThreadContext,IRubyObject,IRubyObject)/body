{
  try {
    initialize_task(context);
  }
 catch (  IOException e) {
    throw context.getRuntime().newRuntimeError(e.getMessage());
  }
  byte[] data=null;
  if (chunk instanceof RubyString || chunk.respondsTo("to_str")) {
    data=chunk.convertToString().getBytes();
  }
 else {
    terminateTask(context);
    XmlSyntaxError xmlSyntaxError=(XmlSyntaxError)NokogiriService.XML_SYNTAXERROR_ALLOCATOR.allocate(context.getRuntime(),getNokogiriClass(context.getRuntime(),"Nokogiri::HTML::SyntaxError"));
    throw new RaiseException(xmlSyntaxError);
  }
  int errorCount0=parserTask.getErrorCount();
  ;
  if (isLast.isTrue()) {
    IRubyObject document=invoke(context,this,"document");
    invoke(context,document,"end_document");
    terminateTask(context);
  }
 else {
    try {
      Future<Void> task=stream.addChunk(new ByteArrayInputStream(data));
      task.get();
    }
 catch (    ClosedStreamException ex) {
    }
catch (    Exception e) {
      throw context.getRuntime().newRuntimeError(e.getMessage());
    }
  }
  if (!options.recover && parserTask.getErrorCount() > errorCount0) {
    terminateTask(context);
    throw new RaiseException(parserTask.getLastError(),true);
  }
  return this;
}
