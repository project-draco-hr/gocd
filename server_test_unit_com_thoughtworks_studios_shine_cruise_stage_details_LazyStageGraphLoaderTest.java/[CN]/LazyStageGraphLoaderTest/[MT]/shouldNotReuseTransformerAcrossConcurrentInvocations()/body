{
  final StageIdentifier stageId=new StageIdentifier("pipeline-foo",23,"stage-1","1");
  final Semaphore invocationBlocker=new Semaphore(1);
  final DummyStageResourceImporter realLoader=new DummyStageResourceImporter(realGraph(),stageId,invocationBlocker);
  final LazyStageGraphLoader loader=new LazyStageGraphLoader(realLoader,stageStorage,2);
  final XSLTTransformerRegistry[] transformerRegistryUsed=new XSLTTransformerRegistry[2];
  invocationBlocker.acquire();
  Thread firstThd=new Thread(new Runnable(){
    public void run(){
      loader.load(stageId);
      invocationBlocker.release();
    }
  }
);
  firstThd.start();
  while (invocationBlocker.getQueueLength() == 0) {
    Thread.sleep(10);
  }
  transformerRegistryUsed[0]=realLoader.transformerRegistry;
  Thread secondThd=new Thread(new Runnable(){
    public void run(){
      stageStorage.clear();
      loader.load(stageId);
    }
  }
);
  secondThd.start();
  while (invocationBlocker.getQueueLength() == 1) {
    Thread.sleep(10);
  }
  transformerRegistryUsed[1]=realLoader.transformerRegistry;
  invocationBlocker.release();
  firstThd.join();
  secondThd.join();
  assertThat(transformerRegistryUsed[0],not(sameInstance(transformerRegistryUsed[1])));
}
