{
  configHelper.setViewPermissionForGroup("group1","jez");
  dbHelper.updateNaturalOrder(pipelineOne.createdPipelineWithAllStagesPassed().getId(),1.0);
  dbHelper.updateNaturalOrder(pipelineTwo.createdPipelineWithAllStagesPassed().getId(),1.0);
  dbHelper.updateNaturalOrder(pipelineTwo.createPipelineWithFirstStagePassedAndSecondStageRunning().getId(),2.0);
  Pipeline toRerun=pipelineTwo.createPipelineWithFirstStagePassedAndSecondStageHasNotStarted();
  pipelineTwo.createPipelineWithFirstStagePassedAndSecondStageHasNotStarted();
  dbHelper.updateNaturalOrder(toRerun.getId(),3);
  dbHelper.scheduleStage(toRerun,pipelineTwo.devStage());
  pipelineRepository.updatePipelineTimeline(pipelineTimeline);
  List<PipelineGroupModel> groupModels=pipelineHistoryService.allActivePipelineInstances(new Username(new CaseInsensitiveString("jez")),PipelineSelections.ALL);
  assertThat(groupModels.size(),is(2));
  List<PipelineModel> pipelineOneModels=groupModels.get(1).getPipelineModels();
  assertThat(pipelineOneModels.size(),is(1));
  PipelineInstanceModels pipelineOneInstances=pipelineOneModels.get(0).getActivePipelineInstances();
  assertThat(pipelineOneInstances.size(),is(1));
  PipelineInstanceModel pipelineOne=pipelineOneInstances.get(0);
  assertThat(pipelineOne.getCounter(),is(1));
  List<PipelineModel> pipelineTwoModels=groupModels.get(0).getPipelineModels();
  assertThat(pipelineTwoModels.size(),is(1));
  PipelineInstanceModels pipelineTwoInstances=pipelineTwoModels.get(0).getActivePipelineInstances();
  assertThat(pipelineTwoInstances.size(),is(3));
  PipelineInstanceModel pipelineTwoJustScheduled=pipelineTwoInstances.get(0);
  assertThat(pipelineTwoJustScheduled.getCounter(),is(4));
  assertThat(pipelineTwoJustScheduled.getStageHistory().size(),is(2));
  StageInstanceModel activeStage=pipelineTwoJustScheduled.activeStage();
  assertThat(activeStage,is(nullValue()));
  PipelineInstanceModel pipelineTwoPostFirstStage=pipelineTwoInstances.get(1);
  assertThat(pipelineTwoPostFirstStage.getCounter(),is(3));
  assertThat(pipelineTwoPostFirstStage.getStageHistory().size(),is(2));
  activeStage=pipelineTwoPostFirstStage.activeStage();
  assertThat(activeStage.getName(),is("dev"));
  assertThat(activeStage.hasPreviousStage(),is(true));
  assertThat(activeStage.getPreviousStage().getResult(),is(StageResult.Passed));
  PipelineInstanceModel pipelineTwoWithSecondStageRunning=pipelineTwoInstances.get(2);
  assertThat(pipelineTwoWithSecondStageRunning.getCounter(),is(2));
  assertThat(pipelineTwoWithSecondStageRunning.getStageHistory().size(),is(2));
  activeStage=pipelineTwoWithSecondStageRunning.activeStage();
  assertThat(activeStage.getName(),is("ft"));
  assertThat(activeStage.hasPreviousStage(),is(true));
  assertThat(activeStage.getPreviousStage().getResult(),is(StageResult.Passed));
}
