{
  String key=key(pipelineName,counter,modifiedTime);
  if (!instanceToRevision.containsKey(key)) {
    if (buildCause.length == 0) {
      throw new RuntimeException("Cannot create instance without a buildcause. You can retrive it without buildcause once it has been created");
    }
    DependencyMaterial material=new DependencyMaterial(new CaseInsensitiveString(pipelineName),new CaseInsensitiveString(STAGE_NAME));
    DependencyMaterialRevision revision=DependencyMaterialRevision.create(pipelineName,counter,"label",STAGE_NAME,1);
    instanceToRevision.put(key,revision.convert(material,modifiedTime));
    final long id=getNextId();
    org.mockito.Mockito.when(pipelineDao.findPipelineByNameAndCounter(pipelineName,counter)).thenReturn(pipeline(id));
    org.mockito.Mockito.when(materialRepository.findMaterialRevisionsForPipeline(id)).thenReturn(buildCauseOfThisPipeline(buildCause));
  }
  MaterialRevision materialRevision=instanceToRevision.get(key);
  Materials materials=new Materials();
  for (  MaterialRevision revision : buildCauseOfThisPipeline(buildCause)) {
    materials.add(revision.getMaterial());
  }
  PipelineConfig config=new PipelineConfig(new CaseInsensitiveString(pipelineName),materials.convertToConfigs(),new StageConfig(new CaseInsensitiveString(STAGE_NAME),new JobConfigs()));
  return new Tuple(new PipelineConfigDependencyGraph(config,dependencyGraphsFor(buildCause)),materialRevision);
}
