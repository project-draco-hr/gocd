{
  final FilterBasedLdapUserSearch filter1=mock(FilterBasedLdapUserSearch.class);
  final FilterBasedLdapUserSearch filter2=mock(FilterBasedLdapUserSearch.class);
  LdapConfig ldapConfig=setLdapConfig(new BasesConfig(new BaseConfig("base1"),new BaseConfig("base2")));
  doReturn(filter1).when(spy).getFilterBasedLdapUserSearch(ldapConfig.getBasesConfig().get(0).getValue(),ldapConfig.searchFilter());
  doReturn(filter2).when(spy).getFilterBasedLdapUserSearch(ldapConfig.getBasesConfig().get(1).getValue(),ldapConfig.searchFilter());
  RuntimeException runtimeException=new RuntimeException("Invalid search base");
  when(filter1.searchForUser("username")).thenThrow(new UsernameNotFoundException("User not found"));
  when(filter2.searchForUser("username")).thenThrow(runtimeException);
  try {
    spy.searchForUser("username");
  }
 catch (  RuntimeException e) {
    assertThat(e,is(runtimeException));
  }
  verify(logger,never()).warn(Matchers.<Object>any(),Matchers.<Throwable>any());
}
