{
  when(agentRegistry.uuid()).thenReturn(agentUuid);
  agentController=createAgentController();
  agentController.init();
  BuildSettings build=new BuildSettings();
  build.setBuildId("b001");
  build.setConsoleUrl("http://foo.bar/console");
  build.setArtifactUploadBaseUrl("http://foo.bar/artifacts");
  build.setPropertyBaseUrl("http://foo.bar/properties");
  build.setBuildLocator("build1");
  build.setBuildLocatorForDisplay("build1ForDisplay");
  build.setBuildCommand(BuildCommand.compose(BuildCommand.echo("building"),BuildCommand.reportCurrentStatus(JobState.Building)));
  agentController.process(new Message(Action.build,MessageEncoding.encodeData(build)));
  assertThat(agentController.getAgentRuntimeInfo().getRuntimeStatus(),is(AgentRuntimeStatus.Idle));
  AgentRuntimeInfo agentRuntimeInfo=cloneAgentRuntimeInfo(agentController.getAgentRuntimeInfo());
  agentRuntimeInfo.busy(new AgentBuildingInfo("build1ForDisplay","build1"));
  verify(agentWebsocketService).sendAndWaitForAck(new Message(Action.reportCurrentStatus,MessageEncoding.encodeData(new Report(agentRuntimeInfo,"b001",JobState.Building,null))));
  verify(agentWebsocketService).sendAndWaitForAck(new Message(Action.reportCompleted,MessageEncoding.encodeData(new Report(agentRuntimeInfo,"b001",null,JobResult.Passed))));
  ArgumentCaptor<HttpPut> putMethodArg=ArgumentCaptor.forClass(HttpPut.class);
  verify(httpService).execute(putMethodArg.capture());
  assertThat(putMethodArg.getValue().getURI(),is(new URI("http://foo.bar/console")));
  assertThat(IO.toString(putMethodArg.getValue().getEntity().getContent()),containsString("building"));
}
