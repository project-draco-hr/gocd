{
  service=spy(service);
  systemEnvironment.set(SystemEnvironment.MATERIAL_UPDATE_INACTIVE_TIMEOUT,1);
  ProcessManager processManager=mock(ProcessManager.class);
  Material material=mock(Material.class);
  service.updateMaterial(material);
  when(service.getProcessManager()).thenReturn(processManager);
  when(material.getFingerprint()).thenReturn("fingerprint");
  when(material.getUriForDisplay()).thenReturn("uri");
  when(material.getLongDescription()).thenReturn("details to uniquely identify a material");
  when(material.isAutoUpdate()).thenReturn(true);
  when(processManager.getIdleTimeFor("fingerprint")).thenReturn(60010L);
  service.updateMaterial(material);
  verify(serverHealthService).removeByScope(HealthStateScope.forMaterialUpdate(material));
  ArgumentCaptor<ServerHealthState> argumentCaptor=new ArgumentCaptor<ServerHealthState>();
  verify(serverHealthService).update(argumentCaptor.capture());
  assertThat(argumentCaptor.getValue().getMessage(),is("Material update for uri hung:"));
  assertThat(argumentCaptor.getValue().getDescription(),is("Material update is currently running but has not shown any activity in the last 1 minute(s). This may be hung. Details - details to uniquely identify a material"));
  assertThat(argumentCaptor.getValue().getType(),is(HealthStateType.general(HealthStateScope.forMaterialUpdate(material))));
}
