{
  if (!isRootApplicationContext(contextRefreshedEvent.getApplicationContext())) {
    return;
  }
  try {
    defaultPluginJarLocationMonitor.initialize();
    pluginsInitializer.initialize();
    pluginsZip.create();
    configCipherUpdater.migrate();
    MagicalGoConfigXmlLoader loader=new MagicalGoConfigXmlLoader(configCache,configElementImplementationRegistry);
    ConfigRepoPartialPreprocessor preprocessor=(ConfigRepoPartialPreprocessor)loader.getPreprocessorOfType(ConfigRepoPartialPreprocessor.class);
    preprocessor.init(goPartialConfig);
    configElementImplementationRegistrar.initialize();
    configRepository.initialize();
    goFileConfigDataSource.upgradeIfNecessary();
    cachedGoConfig.loadConfigIfNull();
    goConfigService.initialize();
    pipelineConfigService.initialize();
    entityHashingService.initialize();
    artifactsDirHolder.initialize();
    artifactsService.initialize();
    consoleService.initialize();
    environmentConfigService.initialize();
    oauthTokenSweeper.initialize();
    invalidConfigMessageRemover.initialize();
    ldapContextFactory.initialize();
    agentService.initialize();
    pipelineLockService.initialize();
    buildAssignmentService.initialize();
    materialUpdateService.initialize();
    pipelineScheduler.initialize();
    removeAdminPermissionFilter.initialize();
    pipelineTimeline.updateTimelineOnInit();
    pipelineSqlMapDao.initialize();
    commandRepositoryInitializer.initialize();
    consoleActivityMonitor.populateActivityMap();
    timerScheduler.initialize();
    stageResourceImporter.initialize();
    goCasServiceProperties.initialize();
    goDiskSpaceMonitor.initialize();
    backupService.initialize();
    railsAssetsService.initialize();
    ccTrayActivityListener.initialize();
    ServletHelper.init();
    Toggles.initializeWith(featureToggleService);
    serverVersionInfoManager.initialize();
  }
 catch (  Throwable throwable) {
    throw new RuntimeException(throwable);
  }
}
