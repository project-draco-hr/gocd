{
  PluggableTask task=mock(PluggableTask.class);
  when(task.getPluginConfiguration()).thenReturn(new PluginConfiguration());
  PluggableTaskBuilder taskBuilder=new PluggableTaskBuilder(runIfConfigs,cancelBuilder,pluggableTask,TEST_PLUGIN_ID,"test-directory",taskExtension){
    @Override protected ExecutionResult executeTask(    Task task,    BuildLogElement buildLogElement,    DefaultGoPublisher publisher,    EnvironmentVariableContext environmentVariableContext){
      return ExecutionResult.failure("err");
    }
  }
;
  when(pluginManager.doOn(eq(Task.class),eq(TEST_PLUGIN_ID),any(ActionWithReturn.class))).thenAnswer(new Answer<ExecutionResult>(){
    @Override public ExecutionResult answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ActionWithReturn<Task,ExecutionResult> actionWithReturn=(ActionWithReturn<Task,ExecutionResult>)invocationOnMock.getArguments()[2];
      return actionWithReturn.execute(mock(Task.class),pluginDescriptor);
    }
  }
);
  try {
    taskBuilder.build(buildLogElement,goPublisher,variableContext);
    fail("expected exception to be thrown");
  }
 catch (  Exception e) {
    ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);
    verify(goPublisher).consumeLine(captor.capture());
    assertThat(captor.getValue(),is("err"));
    assertThat(e.getMessage(),is("err"));
  }
}
