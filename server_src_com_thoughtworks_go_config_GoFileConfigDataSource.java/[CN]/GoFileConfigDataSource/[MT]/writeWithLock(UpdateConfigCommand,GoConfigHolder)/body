{
  try {
    GoConfigHolder validatedConfigHolder;
    List<PartialConfig> lastKnownPartials=cachedGoPartials.lastKnownPartials();
    try {
      String configAsXml=trySavingConfig(updatingCommand,configHolder,lastKnownPartials);
      validatedConfigHolder=internalLoad(configAsXml,getConfigUpdatingUser(updatingCommand));
      validatedConfigHolder.configForEdit.merge(lastKnownPartials,true);
      serverHealthService.update(ServerHealthState.success(HealthStateType.invalidConfigMerge()));
    }
 catch (    GoConfigInvalidException e) {
      if (cachedGoPartials.lastValidPartials().isEmpty() && !(updatingCommand instanceof GoPartialConfig.GoPartialUpdateCommand)) {
        throw e;
      }
 else {
        serverHealthService.update(ServerHealthState.error(GoPartialConfig.INVALID_CRUISE_CONFIG_MERGE,GoConfigValidity.invalid(e).errorMessage(),HealthStateType.invalidConfigMerge()));
        String configAsXml=trySavingConfig(updatingCommand,configHolder,cachedGoPartials.lastValidPartials());
        validatedConfigHolder=internalLoad(configAsXml,getConfigUpdatingUser(updatingCommand));
        validatedConfigHolder.configForEdit.merge(lastKnownPartials,true);
      }
    }
    ConfigSaveState configSaveState=shouldMergeConfig(updatingCommand,configHolder) ? ConfigSaveState.MERGED : ConfigSaveState.UPDATED;
    return new GoConfigSaveResult(validatedConfigHolder,configSaveState);
  }
 catch (  ConfigFileHasChangedException e) {
    LOGGER.warn("Configuration file could not be merged successfully after a concurrent edit: " + e.getMessage(),e);
    throw e;
  }
catch (  GoConfigInvalidException e) {
    LOGGER.warn("Configuration file is invalid: " + e.getMessage(),e);
    throw bomb(e.getMessage(),e);
  }
catch (  Exception e) {
    LOGGER.error("Configuration file is not valid: " + e.getMessage(),e);
    throw bomb(e.getMessage(),e);
  }
 finally {
    LOGGER.debug("[Config Save] Done writing with lock");
  }
}
