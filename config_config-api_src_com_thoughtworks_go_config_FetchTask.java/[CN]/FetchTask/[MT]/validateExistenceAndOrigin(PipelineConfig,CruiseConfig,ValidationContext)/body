{
  if (!cruiseConfig.hasStageConfigNamed(pipelineName.getAncestorName(),stage,true)) {
    addError(STAGE,String.format("Pipeline \"%s\" tries to fetch artifact from stage \"%s :: %s\" which does not exist. It is used in stage \"%s\" inside job \"%s\".",currentPipeline.name(),pipelineName.getAncestorName(),stage,validationContext.getStage().name(),validationContext.getJob().name()));
    return true;
  }
  if (!cruiseConfig.hasBuildPlan(pipelineName.getAncestorName(),stage,CaseInsensitiveString.str(job),true)) {
    addError(JOB,String.format("Pipeline \"%s\" tries to fetch artifact from job \"%s :: %s :: %s\" which does not exist.",currentPipeline.name(),pipelineName.getAncestorName(),stage,job));
    return true;
  }
  PipelineConfig srcPipeline=cruiseConfig.getPipelineConfigByName(pipelineName.getAncestorName());
  if (!cruiseConfig.getConfigRepos().isReferenceAllowed(currentPipeline.getOrigin(),srcPipeline.getOrigin())) {
    addError(ORIGIN,String.format("Pipeline \"%s\" tries to fetch artifact from job \"%s :: %s :: %s\" which is defined in %s - reference is not allowed",currentPipeline.name(),pipelineName.getAncestorName(),stage,job,displayNameFor(srcPipeline.getOrigin())));
    return true;
  }
  return false;
}
