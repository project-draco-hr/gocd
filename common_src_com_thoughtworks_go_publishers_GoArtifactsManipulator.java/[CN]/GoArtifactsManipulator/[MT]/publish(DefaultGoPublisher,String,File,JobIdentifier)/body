{
  if (!source.exists()) {
    String message="Failed to find " + source.getAbsolutePath();
    goPublisher.consumeLineWithPrefix(message);
    bomb(message);
  }
  int publishingAttempts=0;
  Throwable lastException=null;
  while (publishingAttempts < PUBLISH_MAX_RETRIES) {
    File tmpDir=null;
    try {
      publishingAttempts++;
      tmpDir=FileUtil.createTempFolder();
      File dataToUpload=new File(tmpDir,source.getName() + ".zip");
      zipUtil.zip(source,dataToUpload,Deflater.BEST_SPEED);
      long size=0;
      if (source.isDirectory()) {
        size=FileUtils.sizeOfDirectory(source);
      }
 else {
        size=source.length();
      }
      goPublisher.consumeLineWithPrefix("Uploading artifacts from " + source.getAbsolutePath() + " to "+ getDestPath(destPath));
      String normalizedDestPath=normalizePath(destPath);
      String url=urlService.getUploadUrlOfAgent(jobIdentifier,normalizedDestPath,publishingAttempts);
      int statusCode=httpService.upload(url,size,dataToUpload,artifactChecksums(source,normalizedDestPath));
      if (statusCode == HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE) {
        String message=String.format("Artifact upload for file %s (Size: %s) was denied by the server. This usually happens when server runs out of disk space.",source.getAbsolutePath(),size);
        goPublisher.consumeLineWithPrefix(message);
        LOGGER.error("[Artifact Upload] Artifact upload was denied by the server. This usually happens when server runs out of disk space.");
        publishingAttempts=PUBLISH_MAX_RETRIES;
        bomb(message + ".  HTTP return code is " + statusCode);
      }
      if (statusCode < HttpServletResponse.SC_OK || statusCode >= HttpServletResponse.SC_MULTIPLE_CHOICES) {
        bomb("Failed to upload " + source.getAbsolutePath() + ".  HTTP return code is "+ statusCode);
      }
      return;
    }
 catch (    Throwable e) {
      String message="Failed to upload " + source.getAbsolutePath();
      LOGGER.error(message,e);
      goPublisher.consumeLineWithPrefix(message);
      lastException=e;
    }
 finally {
      FileUtil.deleteFolder(tmpDir);
    }
  }
  if (lastException != null) {
    throw new RuntimeException(lastException);
  }
}
