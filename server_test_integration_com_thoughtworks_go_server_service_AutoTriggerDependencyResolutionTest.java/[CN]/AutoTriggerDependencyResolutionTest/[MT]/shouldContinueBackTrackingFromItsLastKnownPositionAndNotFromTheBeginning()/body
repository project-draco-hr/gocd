{
  int i=1;
  GitMaterial git1=u.wf(new GitMaterial("git1"),"folder1");
  String[] git_revs1={"g11","g12","g13"};
  u.checkinInOrder(git1,u.d(i++),git_revs1);
  GitMaterial git2=u.wf(new GitMaterial("git2"),"folder2");
  String[] git_revs2={"g21","g22","g23"};
  u.checkinInOrder(git2,u.d(i++),git_revs2);
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("p1",u.m(git1),u.m(git2));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("p2",u.m(git1),u.m(git2));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("p3",u.m(p1),u.m(p2));
  CruiseConfig cruiseConfig=goConfigDao.load();
  String p1_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,u.d(i++),"g11","g21");
  String p2_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),"g12","g21");
  String p2_2=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),"g11","g23");
  MaterialRevisions given=u.mrs(u.mr(p1,true,p1_1),u.mr(p2,true,p2_2));
  assertThat(getRevisionsBasedOnDependencies(p3,cruiseConfig,given),is(given));
}
