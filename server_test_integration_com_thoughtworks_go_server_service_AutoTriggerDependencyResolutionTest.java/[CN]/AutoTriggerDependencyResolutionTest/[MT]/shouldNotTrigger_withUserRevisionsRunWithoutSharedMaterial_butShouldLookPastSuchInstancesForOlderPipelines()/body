{
  GitMaterial git=u.wf(new GitMaterial("git"),"folder1");
  String[] git_revs={"g1","g2","g3"};
  u.checkinInOrder(git,git_revs);
  SvnMaterial svn=u.wf(new SvnMaterial("svn","username","password",false),"folder2");
  String[] svn_revs={"s1"};
  u.checkinInOrder(svn,svn_revs);
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("P1",u.m(git));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("P2",u.m(git));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("P3",u.m(p1),u.m(p2));
  CruiseConfig cruiseConfig=goConfigFileDao.load();
  String p1_1=u.runAndPass(p1,"g1");
  String p2_1=u.runAndPass(p2,"g1");
  String p3_1=u.runAndPass(p3,p1_1,p2_1);
  configHelper.setMaterialConfigForPipeline("P2",svn.config());
  cruiseConfig=goConfigFileDao.load();
  String p1_2=u.runAndPass(p1,"g2");
  String p2_2=u.runAndPass(new ScheduleTestUtil.AddedPipeline(cruiseConfig.pipelineConfigByName(new CaseInsensitiveString("P2")),p2.material),"s1");
  String p3_2=u.runAndPass(p3,p1_2,p2_2);
  configHelper.setMaterialConfigForPipeline("P2",git.config());
  cruiseConfig=goConfigFileDao.load();
  String p1_3=u.runAndPass(p1,"g2");
  String p2_3=u.runAndPass(p2,"g2");
  MaterialRevisions given=u.mrs(u.mr(p1,true,p1_3),u.mr(p2,false,p2_3));
  assertThat(getRevisionsBasedOnDependencies(p3,cruiseConfig,given),is(given));
  String p1_4=u.runAndPass(p1,"g1");
  given=u.mrs(u.mr(p1,true,p1_4),u.mr(p2,false,p2_3));
  assertThat(getRevisionsBasedOnDependencies(p3,cruiseConfig,given),is(u.mrs(u.mr(p1,true,p1_4),u.mr(p2,false,p2_1))));
  String p3_3=u.runAndPass(p3,p1_4,p2_1);
  String p1_5=u.runAndPass(p1,"g3");
  given=u.mrs(u.mr(p1,true,p1_5),u.mr(p2,false,p2_3));
  MaterialRevisions previous=u.mrs(u.mr(p1,true,p1_4),u.mr(p2,false,p2_1));
  AutoBuild autoBuild=new AutoBuild(goConfigService,pipelineService,"P3",systemEnvironment,materialChecker,serverHealthService);
  assertThat(autoBuild.onModifications(given,false,previous),nullValue());
}
