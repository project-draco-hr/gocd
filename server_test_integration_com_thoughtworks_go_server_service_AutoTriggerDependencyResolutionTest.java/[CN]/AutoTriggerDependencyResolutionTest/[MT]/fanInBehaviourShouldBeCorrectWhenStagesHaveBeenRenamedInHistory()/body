{
  int i=1;
  GitMaterial git1=u.wf(new GitMaterial("git1"),"folder");
  String[] git_revs1={"g11","g12"};
  u.checkinInOrder(git1,u.d(i++),git_revs1);
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("p1","stage1",u.m(git1));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("p2","stage2",u.m(p1));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("p3","stage3",u.m(p1));
  ScheduleTestUtil.AddedPipeline p4=u.saveConfigWith("p4","stage4",u.m(p2),u.m(p3));
  CruiseConfig cruiseConfig=goConfigFileDao.load();
  String p1_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,u.d(i++),"g11");
  String p2_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),p1_1);
  String p3_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p3,u.d(i++),p1_1);
  MaterialRevisions given=u.mrs(u.mr(p2,true,p2_1),u.mr(p3,true,p3_1));
  assertThat(getRevisionsBasedOnDependencies(p4,cruiseConfig,given),is(given));
  p1.config.add(0,StageConfigMother.manualStage("renamed_stage"));
  configHelper.writeConfigFile(cruiseConfig);
  cruiseConfig=goConfigFileDao.load();
  String p1_2=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,u.d(i++),"g12");
  String p2_2=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),p1_2);
  given=u.mrs(u.mr(p2,true,p2_2),u.mr(p3,false,p3_1));
  MaterialRevisions expected=u.mrs(u.mr(p2,true,p2_1),u.mr(p3,true,p3_1));
  assertThat(getRevisionsBasedOnDependencies(p4,cruiseConfig,given),is(expected));
}
