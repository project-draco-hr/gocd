{
  SystemEnvironment env=mock(SystemEnvironment.class);
  when(env.enforceRevisionCompatibilityWithUpstream()).thenReturn(false);
  GitMaterial git=u.wf(new GitMaterial("git"),"folder2");
  git.setFilter(new Filter(new IgnoredFiles("ignored.txt")));
  u.checkinInOrder(git,"g1");
  u.checkinFile(git,"g2",new File("ignored.txt"),ModifiedAction.modified);
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("p1",u.m(git));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("p2",u.m(p1),u.m(git));
  String p1_1=u.runAndPass(p1,"g1");
  String p2_1=u.runAndPass(p2,p1_1,"g1");
  MaterialRevisions given=u.mrs(new MaterialRevision[]{u.mr(p1,false,p1_1),u.mr(git,true,"g2")});
  MaterialRevisions previousRevisions=u.mrs(new MaterialRevision[]{u.mr(p1,true,p1_1),u.mr(git,true,"g1")});
  AutoBuild autoBuild=new AutoBuild(goConfigService,pipelineService,p2.config.name().toString(),env,materialChecker,serverHealthService);
  pipelineTimeline.update();
  BuildCause buildCause=autoBuild.onModifications(given,true,previousRevisions);
  assertThat(buildCause,is(notNullValue()));
  assertThat(buildCause.getMaterialRevisions(),is(given));
}
