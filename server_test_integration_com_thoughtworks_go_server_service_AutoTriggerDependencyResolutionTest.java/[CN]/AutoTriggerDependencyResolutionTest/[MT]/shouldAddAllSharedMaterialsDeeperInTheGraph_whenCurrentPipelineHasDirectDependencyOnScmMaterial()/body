{
  GitMaterial git=u.wf(new GitMaterial("git1"),"folder1");
  String[] git_revs1={"g11","g12"};
  u.checkinInOrder(git,git_revs1);
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("p1",u.m(git));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("p2",u.m(p1));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("p3",u.m(p2));
  ScheduleTestUtil.AddedPipeline p4=u.saveConfigWith("p4",u.m(p3));
  ScheduleTestUtil.AddedPipeline p5=u.saveConfigWith("p5",u.m(git),u.m(p4));
  CruiseConfig cruiseConfig=goConfigDao.load();
  String p1_1=u.runAndPass(p1,"g11");
  String p2_1=u.runAndPass(p2,p1_1);
  String p3_1=u.runAndPass(p3,p2_1);
  String p4_1=u.runAndPass(p4,p3_1);
  MaterialRevisions given=u.mrs(u.mr(git,true,"g11"),u.mr(p4,true,p4_1));
  MaterialRevisions expected=u.mrs(u.mr(git,true,"g11"),u.mr(p4,true,p4_1));
  assertThat(getRevisionsBasedOnDependencies(p5,cruiseConfig,given),is(expected));
  String p1_2=u.runAndPass(p1,"g12");
  String p2_2=u.runAndPass(p2,p1_2);
  String p3_2=u.runAndPass(p3,p2_2);
  given=u.mrs(u.mr(git,true,"g12"),u.mr(p4,false,p4_1));
  expected=u.mrs(u.mr(git,false,"g11"),u.mr(p4,false,p4_1));
  assertThat(getRevisionsBasedOnDependencies(p5,cruiseConfig,given),is(expected));
}
