{
  int i=1;
  GitMaterial git1=u.wf(new GitMaterial("git1"),"folder");
  String[] git1_revs={"g11","g12"};
  u.checkinInOrder(git1,u.d(i++),git1_revs);
  GitMaterial git2=u.wf(new GitMaterial("git2"),"folder-git2");
  String[] git2_revs={"g21","g22"};
  u.checkinInOrder(git2,u.d(i++),git2_revs);
  ScheduleTestUtil.AddedPipeline p1=u.saveConfigWith("p1",u.m(git1));
  ScheduleTestUtil.AddedPipeline p2=u.saveConfigWith("p2",u.m(p1));
  ScheduleTestUtil.AddedPipeline p3=u.saveConfigWith("p3",u.m(p1));
  ScheduleTestUtil.AddedPipeline p4=u.saveConfigWith("p4",u.m(git2));
  ScheduleTestUtil.AddedPipeline p5=u.saveConfigWith("p5",u.m(p2),u.m(p3),u.m(p4));
  CruiseConfig cruiseConfig=goConfigFileDao.load();
  String p1_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p1,u.d(i++),"g11");
  String p2_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p2,u.d(i++),p1_1);
  String p3_1=u.runAndPassWithGivenMDUTimestampAndRevisionStrings(p3,u.d(i++),p1_1);
  Pipeline p4_1=u.runAndPassAndReturnPipelineInstance(p4,u.d(i++),"g21");
  String p4_1_2=u.rerunStageAndCancel(p4_1,p4.config.getFirstStageConfig());
  MaterialRevisions given=u.mrs(u.mr(p2,true,p2_1),u.mr(p3,true,p3_1),u.mr(p4,true,p4_1.getStages().get(0).getIdentifier().getStageLocator()));
  assertThat(getRevisionsBasedOnDependencies(p5,cruiseConfig,given),is(given));
}
