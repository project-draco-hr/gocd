{
  String pluginJarFileName="descriptor-aware-test-plugin.jar";
  File pluginJarFile=new File(PLUGIN_DIR,pluginJarFileName);
  copyPluginToTheDirectory(PLUGIN_DIR,pluginJarFileName);
  final GoPluginDescriptor descriptor=new GoPluginDescriptor("some.old.id","1.0",new GoPluginDescriptor.About(null,null,null,null,null,null),null,new File(pluginJarFileName),false);
  when(systemEnvironment.getCurrentOperatingSystem()).thenReturn(OperatingSystem.WINDOWS);
  when(goPluginDescriptorBuilder.build(pluginJarFile,true)).thenReturn(descriptor);
  when(osgiFramework.hasReferenceFor(PluginDescriptorAware.class,descriptor.id())).thenReturn(true);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      descriptor.markAsInvalid(Arrays.asList("Marking invalid for test"),new Exception("dummy test exception"));
      return null;
    }
  }
).when(osgiFramework).loadPlugin(descriptor);
  listener=new DefaultPluginJarChangeListener(registry,osgiManifestGenerator,osgiFramework,goPluginDescriptorBuilder,systemEnvironment);
  listener.pluginJarAdded(new PluginFileDetails(pluginJarFile,true));
  verify(registry,times(1)).loadPlugin(descriptor);
  verify(osgiFramework,times(1)).loadPlugin(descriptor);
  verify(osgiFramework,never()).hasReferenceFor(PluginDescriptorAware.class,descriptor.id());
  verify(osgiFramework,never()).doOnAllForPlugin(eq(PluginDescriptorAware.class),eq(descriptor.id()),Matchers.<Action<PluginDescriptorAware>>anyObject());
}
