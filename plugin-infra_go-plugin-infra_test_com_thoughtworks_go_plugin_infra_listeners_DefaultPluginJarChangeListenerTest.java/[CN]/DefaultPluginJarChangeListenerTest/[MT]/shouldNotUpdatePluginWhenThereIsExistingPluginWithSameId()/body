{
  String pluginId="plugin-id";
  String pluginJarFileName="plugin-file-name";
  File pluginJarFile=mock(File.class);
  when(pluginJarFile.getName()).thenReturn(pluginJarFileName);
  GoPluginDescriptor newPluginDescriptor=new GoPluginDescriptor(pluginId,"1.0",null,pluginJarFile.getAbsolutePath(),new File(pluginJarFileName),true);
  when(goPluginDescriptorBuilder.build(pluginJarFile,false)).thenReturn(newPluginDescriptor);
  GoPluginDescriptor oldPluginDescriptor=new GoPluginDescriptor(pluginId,"1.0",null,"location-old",new File("location-old"),true);
  when(registry.getPluginByIdOrFileName(pluginId,pluginJarFileName)).thenReturn(oldPluginDescriptor);
  DefaultPluginJarChangeListener spy=spy(listener);
  try {
    spy.pluginJarUpdated(new PluginFileDetails(pluginJarFile,false));
    fail("should have failed as external plugin cannot replace bundled plugin");
  }
 catch (  RuntimeException e) {
    assertThat(e.getMessage(),is("Found another plugin with ID: plugin-id"));
  }
  verify(spy,never()).explodePluginJarToBundleDir(pluginJarFile,newPluginDescriptor.bundleLocation());
}
