{
  PipelineConfig p1=createPipelineConfig("p1","s1","j1");
  PipelineConfig p2=createPipelineConfig("p2","s2","j1");
  p2.addMaterialConfig(new DependencyMaterialConfig(new CaseInsensitiveString("p1"),new CaseInsensitiveString("s1")));
  PipelineConfig p3=createPipelineConfig("p3","s3","j1");
  p3.addMaterialConfig(new DependencyMaterialConfig(new CaseInsensitiveString("p1"),new CaseInsensitiveString("s1")));
  PipelineConfig p4=createPipelineConfig("p4","s4","j1");
  p4.addMaterialConfig(new DependencyMaterialConfig(new CaseInsensitiveString("p2"),new CaseInsensitiveString("s2")));
  pipelines.addAll(Arrays.asList(p4,p2,p1,p3));
  Map<String,List<PipelineConfig>> expectedPipelines=cruiseConfig.generatePipelineVsDownstreamMap();
  assertThat(expectedPipelines.size(),is(5));
  assertThat(expectedPipelines.get("p1"),hasItems(p2,p3));
  assertThat(expectedPipelines.get("p2"),hasItems(p4));
  assertThat(expectedPipelines.get("p3").isEmpty(),is(true));
  assertThat(expectedPipelines.get("p4").isEmpty(),is(true));
  assertThat(expectedPipelines.get("remote-pipe-1").isEmpty(),is(true));
}
