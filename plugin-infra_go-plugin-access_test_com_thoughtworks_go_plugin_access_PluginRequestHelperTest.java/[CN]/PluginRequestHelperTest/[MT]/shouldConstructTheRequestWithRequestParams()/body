{
  final String requestBody="request_body";
  when(response.responseCode()).thenReturn(DefaultGoApiResponse.SUCCESS_RESPONSE_CODE);
  final GoPluginApiRequest[] generatedRequest={null};
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      generatedRequest[0]=(GoPluginApiRequest)invocationOnMock.getArguments()[1];
      return response;
    }
  }
).when(pluginManager).submitTo(eq(pluginId),any(GoPluginApiRequest.class));
  helper.submitRequest(pluginId,requestName,new PluginInteractionCallback<Object>(){
    @Override public String requestBody(    String resolvedExtensionVersion){
      return requestBody;
    }
    @Override public Map<String,Object> requestParams(    String resolvedExtensionVersion){
      final HashMap params=new HashMap();
      params.put("p1","v1");
      params.put("p2","v2");
      return params;
    }
    @Override public Object onSuccess(    String responseBody,    String resolvedExtensionVersion){
      return null;
    }
  }
);
  assertThat(generatedRequest[0].requestBody(),is(requestBody));
  assertThat(generatedRequest[0].extension(),is(extensionName));
  assertThat(generatedRequest[0].requestName(),is(requestName));
  assertThat(generatedRequest[0].requestParameters().size(),is(2));
  assertThat((String)generatedRequest[0].requestParameters().get("p1"),is("v1"));
  assertThat((String)generatedRequest[0].requestParameters().get("p2"),is("v2"));
}
