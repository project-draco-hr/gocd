{
  when(response.responseCode()).thenReturn(DefaultGoApiResponse.INTERNAL_ERROR);
  when(response.responseBody()).thenReturn("junk");
  when(pluginManager.submitTo(eq(pluginId),any(GoPluginApiRequest.class))).thenReturn(response);
  try {
    helper.submitRequest(pluginId,requestName,new PluginInteractionCallback<Object>(){
      @Override public String requestBody(      String resolvedExtensionVersion){
        return null;
      }
      @Override public Map<String,String> requestParams(      String resolvedExtensionVersion){
        return null;
      }
      @Override public Object onSuccess(      String responseBody,      String resolvedExtensionVersion){
        isSuccessInvoked[0]=true;
        return null;
      }
    }
);
    fail("should throw exception");
  }
 catch (  Exception e) {
    assertThat(e.getMessage(),is("Interaction with plugin with id 'pid' implementing 'some-extension' extension failed while requesting for 'req'. Reason: [Unsuccessful response from plugin. Plugin returned with code '500' and the following response: 'junk']"));
    assertThat(e.getCause().getMessage(),is("Unsuccessful response from plugin. Plugin returned with code '500' and the following response: 'junk'"));
    assertFalse(isSuccessInvoked[0]);
    verify(pluginManager).submitTo(eq(pluginId),any(GoPluginApiRequest.class));
  }
}
