{
  while (traversalDirection.hasNext()) {
    List<Node> nodesAtLevel=traversalDirection.next();
    int depth=1;
    for (int i=0; i < nodesAtLevel.size(); i++) {
      Node currentNode=nodesAtLevel.get(i);
      List<Node> relatedNodesAtPreviousLevel=traversalDirection.getRelatedNodesAtPreviousLevel(currentNode);
      int leastDepth=minDepth(relatedNodesAtPreviousLevel);
      if (depth < leastDepth) {
        List<Node> nodesRemaining=nodesAtLevel.subList(i,nodesAtLevel.size());
        int initialSlope=calculateSlope(depth - currentNode.getDepth(),nodesRemaining,traversalDirection);
        int newSlope=calculateSlope(leastDepth - depth,nodesRemaining,traversalDirection);
        if (newSlope < initialSlope) {
          depth=leastDepth;
        }
      }
      currentNode.setDepth(depth++);
    }
  }
}
