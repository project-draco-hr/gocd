{
  final JettyServer server=mock(JettyServer.class);
  when(server.getContainer()).thenReturn(new Container());
  when(server.getServer()).thenReturn(mock(Server.class));
  SystemEnvironment environment=spy(new SystemEnvironment());
  final WebAppContext mainWebapp=mock(WebAppContext.class);
  final GoServer.GoServerWelcomeFileHandler welcomeHandler=mock(GoServer.GoServerWelcomeFileHandler.class);
  final GoServer.LegacyUrlRequestHandler legacyRequestHandler=mock(GoServer.LegacyUrlRequestHandler.class);
  GoServer goServer=new GoServer(environment,new GoCipherSuite(sslSocketFactory),null){
    @Override JettyServer createServer(){
      return server;
    }
    @Override WebAppContext webApp() throws IOException, SAXException, ClassNotFoundException, UnavailableException {
      return mainWebapp;
    }
    @Override ContextHandler welcomeFileHandler(){
      return welcomeHandler;
    }
    @Override public ContextHandler legacyRequestHandler(){
      return legacyRequestHandler;
    }
    @Override Validation validate(){
      return Validation.SUCCESS;
    }
  }
;
  assertThat(goServer.configureServer(),sameInstance(server));
  verify(server).addHandler(welcomeHandler);
  verify(server).addHandler(legacyRequestHandler);
  verify(server).addWebAppHandler(mainWebapp);
}
