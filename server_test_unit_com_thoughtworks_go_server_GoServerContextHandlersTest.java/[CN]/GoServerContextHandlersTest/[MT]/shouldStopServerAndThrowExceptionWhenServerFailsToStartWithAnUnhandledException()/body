{
  final JettyServer server=mock(JettyServer.class);
  final WebAppContext webAppContext=mock(WebAppContext.class);
  when(server.getContainer()).thenReturn(new ServletContextHandler());
  when(server.getServer()).thenReturn(mock(Server.class));
  GoServer goServer=new GoServer(){
    @Override WebAppContext webApp() throws IOException, SAXException, ClassNotFoundException, UnavailableException {
      return webAppContext;
    }
    @Override JettyServer createServer(){
      return server;
    }
  }
;
  doNothing().when(server).start();
  doNothing().when(server).stop();
  doReturn(webAppContext).when(server).webAppContext();
  when(webAppContext.getUnavailableException()).thenReturn(new RuntimeException("Some unhandled server startup exception"));
  try {
    goServer.startServer();
    fail("Should have thrown an exception");
  }
 catch (  RuntimeException e) {
    assertThat(e.getMessage(),is("Failed to start Go server."));
    assertThat(e.getCause().getMessage(),is("Some unhandled server startup exception"));
  }
  InOrder inOrder=inOrder(server,webAppContext);
  inOrder.verify(server).start();
  inOrder.verify(webAppContext).getUnavailableException();
  inOrder.verify(server).stop();
}
