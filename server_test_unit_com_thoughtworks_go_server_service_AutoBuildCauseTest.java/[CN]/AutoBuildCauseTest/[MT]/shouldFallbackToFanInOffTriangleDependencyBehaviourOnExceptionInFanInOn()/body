{
  PipelineConfigDependencyGraph dependencyGraph=dependencyGraphOfDepthOne(MaterialConfigsMother.hgMaterialConfig());
  String targetPipeline=dependencyGraph.getCurrent().name().toLower();
  MaterialRevisions revisions=createHgMaterialWithMultipleRevisions(1,oneModifiedFile("2"));
  MaterialRevision dependencyRevision=dependencyMaterialRevision("up1",1,"label","first",1,new Date());
  dependencyRevision.markAsChanged();
  revisions.addRevision(dependencyRevision);
  when(goConfigService.upstreamDependencyGraphOf(targetPipeline,cruiseConfig)).thenReturn(dependencyGraph);
  when(pipelineService.getRevisionsBasedOnDependencies(eq(revisions),eq(cruiseConfig),eq(dependencyGraph.getCurrent().name()))).thenThrow(new RuntimeException("failed")).thenReturn(null);
  new AutoBuild(goConfigService,pipelineService,targetPipeline,new SystemEnvironment(),materialChecker,serverHealthService).onModifications(revisions,false,null);
  verify(pipelineService,times(1)).getRevisionsBasedOnDependencies(dependencyGraph,revisions);
  assertThat(serverHealthService.getAllLogs().size(),is(1));
  assertThat(serverHealthService.getAllLogs(),hasItem((ServerHealthState.warning("Turning off Fan-In for pipeline: 'current'","Error occurred during Fan-In resolution for the pipeline.",HealthStateType.general(HealthStateScope.forFanin(targetPipeline))))));
  new AutoBuild(goConfigService,pipelineService,targetPipeline,new SystemEnvironment(),materialChecker,serverHealthService).onModifications(revisions,false,null);
  verify(pipelineService,times(1)).getRevisionsBasedOnDependencies(dependencyGraph,revisions);
  assertThat(serverHealthService.getAllLogs().size(),is(0));
}
