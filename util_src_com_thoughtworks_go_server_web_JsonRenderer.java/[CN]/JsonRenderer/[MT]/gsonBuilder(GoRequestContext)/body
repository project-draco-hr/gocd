{
  GsonBuilder builder=new GsonBuilder();
  builder.registerTypeAdapter(JsonUrl.class,new JsonSerializer<JsonUrl>(){
    @Override public JsonElement serialize(    JsonUrl src,    Type typeOfSrc,    JsonSerializationContext context){
      if (requestContext == null) {
        return new JsonPrimitive(src.getUrl());
      }
 else {
        return new JsonPrimitive(requestContext.getFullRequestPath() + src.getUrl());
      }
    }
  }
);
  builder.registerTypeHierarchyAdapter(MessageSourceResolvable.class,new JsonSerializer<MessageSourceResolvable>(){
    @Override public JsonElement serialize(    MessageSourceResolvable src,    Type typeOfSrc,    JsonSerializationContext context){
      if (requestContext == null) {
        return new JsonPrimitive(src.getDefaultMessage());
      }
 else {
        return new JsonPrimitive(requestContext.getMessage(src));
      }
    }
  }
);
  builder.serializeNulls();
  return builder.create();
}
