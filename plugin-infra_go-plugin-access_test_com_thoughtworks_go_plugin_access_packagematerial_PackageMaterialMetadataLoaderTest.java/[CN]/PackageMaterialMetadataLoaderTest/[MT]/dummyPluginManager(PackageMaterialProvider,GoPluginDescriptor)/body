{
  return new PluginManager(){
    @Override public List<GoPluginDescriptor> plugins(){
      return null;
    }
    @Override public GoPluginDescriptor getPluginDescriptorFor(    String pluginId){
      return null;
    }
    @Override public <T>void doOnAll(    Class<T> serviceReferenceClass,    Action<T> actionToDoOnEachRegisteredServiceWhichMatches){
    }
    @Override public <T>void doOnAll(    Class<T> serviceReferenceClass,    Action<T> actionToDoOnEachRegisteredServiceWhichMatches,    ExceptionHandler<T> exceptionHandler){
    }
    @Override public <T,R>R doOn(    Class<T> serviceReferenceClass,    String pluginId,    ActionWithReturn<T,R> actionToDoOnTheRegisteredServiceWhichMatches){
      return null;
    }
    @Override public <T>void doOn(    Class<T> serviceReferenceClass,    String pluginId,    Action<T> action){
    }
    @Override public <T>void doOnIfHasReference(    Class<T> serviceReferenceClass,    String pluginId,    Action<T> action){
      action.execute((T)mock,pluginDescriptor);
    }
    @Override public void startPluginInfrastructure(){
    }
    @Override public void stopPluginInfrastructure(){
    }
    @Override public void addPluginChangeListener(    PluginChangeListener pluginChangeListener,    Class<?>... serviceReferenceClass){
    }
  }
;
}
