{
  StageConfig stageConfig=StageConfigMother.custom("dev","build");
  JobConfig jobConfig=stageConfig.jobConfigByInstanceName("build",true);
  jobConfig.setRunOnAllAgents(true);
  String uuid1=UUID.randomUUID().toString();
  String uuid2=UUID.randomUUID().toString();
  DefaultSchedulingContext schedulingContext=new DefaultSchedulingContext("anyone",new Agents(new AgentConfig(uuid1),new AgentConfig(uuid2)));
  Stage stage=instanceFactory.createStageInstance(stageConfig,schedulingContext,"md5-test",new TimeProvider());
  for (  JobInstance instance : stage.getJobInstances()) {
    instance.setIdentifier(new JobIdentifier("cruise","1","dev","1",instance.getName()));
  }
  jobStatusCache.jobStatusChanged(stage.getJobInstances().first());
  jobStatusCache.jobStatusChanged(stage.getJobInstances().last());
  JobInstances jobs=jobInstanceService.currentJobsOfStage("cruise",stageConfig);
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("name",is(RunOnAllAgents.CounterBasedJobNameGenerator.appendMarker("build",1)))));
  assertThat(jobs.toArray(),hasItemInArray(hasProperty("name",is(RunOnAllAgents.CounterBasedJobNameGenerator.appendMarker("build",2)))));
  assertThat(jobs.size(),is(2));
}
