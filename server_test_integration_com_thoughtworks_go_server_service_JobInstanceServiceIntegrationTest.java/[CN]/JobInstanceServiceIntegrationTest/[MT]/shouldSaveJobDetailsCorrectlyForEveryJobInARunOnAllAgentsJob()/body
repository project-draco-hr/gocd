{
  PipelineConfig pipelineConfig=PipelineMother.withSingleStageWithMaterials("go","dev",withBuildPlans("unit"));
  JobConfig jobConfig=pipelineConfig.getFirstStageConfig().getJobs().get(0);
  jobConfig.setRunOnAllAgents(true);
  jobConfig.addResource("blah");
  jobConfig.getProperties().add(new ArtifactPropertiesGenerator("prop1","props.xml","//somepath"));
  jobConfig.artifactPlans().add(new ArtifactPlan(ArtifactType.file,"src1","dest1"));
  configHelper.addPipeline("go","dev");
  DefaultSchedulingContext schedulingContext=new DefaultSchedulingContext("anyone",new Agents(localAgentWithResources("blah"),localAgentWithResources("blah")));
  scheduleHelper.schedule(pipelineConfig,BuildCause.createWithModifications(modifyOneFile(pipelineConfig),""),DEFAULT_APPROVED_BY,schedulingContext);
  List<JobPlan> jobPlans=jobInstanceService.orderedScheduledBuilds();
  assertThat(jobPlans.size(),is(2));
  JobPlan job1=jobPlans.get(0);
  assertThat(job1.getResources().size(),is(1));
  assertThat(job1.getResources().get(0).getName(),is("blah"));
  assertThat(job1.getPropertyGenerators().size(),is(1));
  assertThat(job1.getPropertyGenerators().get(0).getName(),is("prop1"));
  assertThat(job1.getArtifactPlans().size(),is(1));
  assertThat(job1.getArtifactPlans().get(0).getSrc(),is("src1"));
  JobPlan job2=jobPlans.get(1);
  assertThat(job2.getResources().size(),is(1));
  assertThat(job2.getResources().get(0).getName(),is("blah"));
  assertThat(job2.getPropertyGenerators().size(),is(1));
  assertThat(job2.getPropertyGenerators().get(0).getName(),is("prop1"));
  assertThat(job2.getArtifactPlans().size(),is(1));
  assertThat(job2.getArtifactPlans().get(0).getSrc(),is("src1"));
  assertThat(job1.getResources().get(0).getId(),not(equalTo(job2.getResources().get(0).getId())));
  assertThat(job1.getPropertyGenerators().get(0).getId(),not(equalTo(job2.getPropertyGenerators().get(0).getId())));
  assertThat(job1.getArtifactPlans().get(0).getId(),not(equalTo(job2.getArtifactPlans().get(0).getId())));
}
