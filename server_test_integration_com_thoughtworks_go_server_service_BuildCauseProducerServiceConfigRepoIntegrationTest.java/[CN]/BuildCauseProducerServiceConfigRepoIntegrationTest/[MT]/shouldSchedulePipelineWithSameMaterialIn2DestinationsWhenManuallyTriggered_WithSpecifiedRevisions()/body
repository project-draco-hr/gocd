{
  pipelineConfig=PipelineConfigMother.createPipelineConfigWithStages("pipe1","build","test");
  pipelineConfig.materialConfigs().clear();
  materialConfig=hgRepo.createMaterialConfig("dest1");
  materialConfig.setAutoUpdate(true);
  MaterialConfig otherMaterialConfig=hgRepo.createMaterialConfig("dest2");
  otherMaterialConfig.setAutoUpdate(true);
  pipelineConfig.materialConfigs().add(materialConfig);
  pipelineConfig.materialConfigs().add(otherMaterialConfig);
  List<Modification> firstBuildModifications=configTestRepo.addPipelineToRepositoryAndPush(fileName,pipelineConfig);
  materialUpdateService.updateMaterial(material);
  waitForMaterialNotInProgress();
  mergedGoConfig.throwExceptionIfExists();
  final HashMap<String,String> revisions=new HashMap<String,String>();
  final HashMap<String,String> environmentVariables=new HashMap<String,String>();
  buildCauseProducer.manualProduceBuildCauseAndSave(PIPELINE_NAME,Username.ANONYMOUS,new ScheduleOptions(revisions,environmentVariables,new HashMap<String,String>()),new ServerHealthStateOperationResult());
  mergedGoConfig.throwExceptionIfExists();
  Map<String,BuildCause> afterLoad=scheduleHelper.waitForAnyScheduled(5);
  assertThat(afterLoad.keySet(),hasItem(PIPELINE_NAME));
  BuildCause cause=afterLoad.get(PIPELINE_NAME);
  assertThat(cause.getBuildCauseMessage(),containsString("Forced by anonymous"));
  List<Modification> secondBuildModifications=configTestRepo.addCodeToRepositoryAndPush("a.java","added code file","some java code");
  materialUpdateService.updateMaterial(material);
  waitForMaterialNotInProgress();
  pipelineScheduleQueue.clear();
  String explicitRevision=firstBuildModifications.get(0).getRevision();
  revisions.put(materialConfig.getPipelineUniqueFingerprint(),explicitRevision);
  buildCauseProducer.manualProduceBuildCauseAndSave(PIPELINE_NAME,new Username(new CaseInsensitiveString("Admin")),new ScheduleOptions(revisions,environmentVariables,new HashMap<String,String>()),new ServerHealthStateOperationResult());
  mergedGoConfig.throwExceptionIfExists();
  afterLoad=scheduleHelper.waitForAnyScheduled(5);
  assertThat(afterLoad.keySet(),hasItem(PIPELINE_NAME));
  cause=afterLoad.get(PIPELINE_NAME);
  assertThat(cause.getBuildCauseMessage(),containsString("Forced by Admin"));
  PipelineConfig pipelineConfigAfterSchedule=goConfigService.pipelineConfigNamed(pipelineConfig.name());
  RepoConfigOrigin configOriginAfterSchedule=(RepoConfigOrigin)pipelineConfigAfterSchedule.getOrigin();
  String lastPushedRevision=secondBuildModifications.get(0).getRevision();
  assertThat("revisionOfPipelineConfigOriginShouldMatchLastPushedCommit",configOriginAfterSchedule.getRevision(),is(lastPushedRevision));
  assertThat(pipelineConfigAfterSchedule.materialConfigs(),hasItem(otherMaterialConfig));
  assertThat("buildCauseRevisionShouldMatchSpecifiedRevision",cause.getMaterialRevisions().latestRevision(),is(explicitRevision));
}
