{
  acquireAllWriteLocks();
  try {
    final long maximumIdBeforeUpdate=maximumId;
    transactionTemplate.execute(new TransactionCallback(){
      public Object doInTransaction(      TransactionStatus transactionStatus){
        final List<PipelineTimelineEntry>[] tempEntries=new List[1];
        transactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
          @Override public void afterCompletion(          int status){
            if (STATUS_ROLLED_BACK == status) {
              rollbackTempEntries();
            }
 else             if (STATUS_COMMITTED == status) {
              notifyListeners(tempEntries[0]);
            }
          }
          private void rollbackTempEntries(){
            for (            PipelineTimelineEntry entry : tempEntries[0]) {
              rollbackNewEntryFor(entry);
            }
            maximumId=maximumIdBeforeUpdate;
          }
          private void rollbackNewEntryFor(          PipelineTimelineEntry entry){
            CaseInsensitiveString pipelineName=new CaseInsensitiveString(entry.getPipelineName());
            initializedNaturalOrderCollection(pipelineName).remove(entry);
            initializedScheduleOrderCollection(pipelineName).remove(entry);
          }
        }
);
        tempEntries[0]=pipelineRepository.updatePipelineTimeline(PipelineTimeline.this);
        return null;
      }
    }
);
  }
  finally {
    releaseAllWriteLocks();
  }
}
