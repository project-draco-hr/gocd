{
synchronized (scanLock) {
    if (scanning) {
      while (scanning) {
        try {
          scanLock.wait();
        }
 catch (        InterruptedException e) {
          continue;
        }
      }
      if (illegal != null) {
        throw illegal;
      }
      return this;
    }
    scanning=true;
  }
  try {
synchronized (this) {
      illegal=null;
      clearResults();
      boolean nullIncludes=(includes == null);
      includes=nullIncludes ? new String[]{"**"} : includes;
      boolean nullExcludes=(excludes == null);
      excludes=nullExcludes ? new String[0] : excludes;
      if (basedir == null) {
        if (nullIncludes) {
          return this;
        }
      }
 else {
        if (!basedir.exists()) {
          if (errorOnMissingDir) {
            illegal=new IllegalStateException("basedir " + basedir + " does not exist");
          }
 else {
            return this;
          }
        }
        if (!basedir.isDirectory()) {
          illegal=new IllegalStateException("basedir " + basedir + " is not a directory");
        }
        if (illegal != null) {
          throw illegal;
        }
      }
      if (isIncluded("")) {
        if (!isExcluded("")) {
          if (isSelected("",basedir)) {
            dirsIncluded.addElement("");
          }
 else {
            dirsDeselected.addElement("");
          }
        }
 else {
          dirsExcluded.addElement("");
        }
      }
 else {
        dirsNotIncluded.addElement("");
      }
      checkIncludePatterns();
      clearCaches();
      includes=nullIncludes ? null : includes;
      excludes=nullExcludes ? null : excludes;
    }
  }
  finally {
synchronized (scanLock) {
      scanning=false;
      scanLock.notifyAll();
    }
  }
  return this;
}
