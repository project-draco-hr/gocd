{
  final SortedSet<Attr> result=this.result;
  result.clear();
  SortedSet<String> visiblyUtilized=new TreeSet<String>();
  if (inclusiveNSSet != null && !inclusiveNSSet.isEmpty()) {
    visiblyUtilized.addAll(inclusiveNSSet);
  }
  if (element.hasAttributes()) {
    NamedNodeMap attrs=element.getAttributes();
    int attrsLength=attrs.getLength();
    for (int i=0; i < attrsLength; i++) {
      Attr attribute=(Attr)attrs.item(i);
      String NName=attribute.getLocalName();
      String NNodeValue=attribute.getNodeValue();
      if (!XMLNS_URI.equals(attribute.getNamespaceURI())) {
        String prefix=attribute.getPrefix();
        if (prefix != null && !(prefix.equals(XML) || prefix.equals(XMLNS))) {
          visiblyUtilized.add(prefix);
        }
        result.add(attribute);
      }
 else       if (!(XML.equals(NName) && XML_LANG_URI.equals(NNodeValue)) && ns.addMapping(NName,NNodeValue,attribute) && C14nHelper.namespaceIsRelative(NNodeValue)) {
        Object exArgs[]={element.getTagName(),NName,attribute.getNodeValue()};
        throw new CanonicalizationException("c14n.Canonicalizer.RelativeNamespace",exArgs);
      }
    }
  }
  String prefix=null;
  if (element.getNamespaceURI() != null && !(element.getPrefix() == null || element.getPrefix().length() == 0)) {
    prefix=element.getPrefix();
  }
 else {
    prefix=XMLNS;
  }
  visiblyUtilized.add(prefix);
  for (  String s : visiblyUtilized) {
    Attr key=ns.getMapping(s);
    if (key != null) {
      result.add(key);
    }
  }
  return result.iterator();
}
