{
  PipelineConfig remoteDownstreamPipeline=partialConfig.getGroups().first().getPipelines().get(0);
  assertThat(goConfigService.getCurrentConfig().getAllPipelineNames().contains(remoteDownstreamPipeline.name()),is(true));
  final CaseInsensitiveString upstreamStageRenamed=new CaseInsensitiveString("upstream_stage_renamed");
  partialConfig=PartialConfigMother.pipelineWithDependencyMaterial("remote-downstream",new PipelineConfig(pipelineConfig.name(),pipelineConfig.materialConfigs(),new StageConfig(upstreamStageRenamed,new JobConfigs())),new RepoConfigOrigin(repoConfig1,"repo1_r2"));
  goPartialConfig.onSuccessPartialConfig(repoConfig1,partialConfig);
  CruiseConfig currentConfig=goConfigService.getCurrentConfig();
  DependencyMaterialConfig dependencyMaterialForRemotePipelineInConfigCache=currentConfig.getPipelineConfigByName(remoteDownstreamPipeline.name()).materialConfigs().findDependencyMaterial(pipelineConfig.name());
  assertThat(dependencyMaterialForRemotePipelineInConfigCache.getStageName(),is(new CaseInsensitiveString("stage")));
  assertThat(((RepoConfigOrigin)currentConfig.getPipelineConfigByName(remoteDownstreamPipeline.name()).getOrigin()).getRevision(),is("repo1_r1"));
  assertThat(((RepoConfigOrigin)cachedGoPartials.getValid(repoConfig1.getMaterialConfig().getFingerprint()).getOrigin()).getRevision(),is("repo1_r1"));
  assertThat(((RepoConfigOrigin)cachedGoPartials.getKnown(repoConfig1.getMaterialConfig().getFingerprint()).getOrigin()).getRevision(),is("repo1_r2"));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1)).size(),is(1));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1)).get(0).getMessage(),is("Invalid Merged Configuration"));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1)).get(0).getDescription(),is(String.format("1+ errors :: Stage with name 'upstream_stage_renamed' does not exist on pipeline '%s', it is being referred to from pipeline 'remote-downstream' (url at repo1_r2);;  -  Config-Repo: url at repo1_r2",pipelineConfig.name())));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig2)).isEmpty(),is(true));
  String xml=new MagicalGoConfigXmlWriter(configCache,registry).toXmlPartial(pipelineConfig);
  String md5=CachedDigestUtils.md5Hex(xml);
  pipelineConfig.getFirstStageConfig().setName(new CaseInsensitiveString("new_name"));
  pipelineConfigService.updatePipelineConfig(user,pipelineConfig,md5,result);
  assertThat(result.isSuccessful(),is(false));
  assertThat(result.message(localizer),is(String.format("Validations failed for pipeline '%s'. " + "Error(s): [Merged update operation failed on VALID 2 partials. Falling back to using LAST KNOWN 2 partials. " + "Exception message was: [Validation failed. Stage with name 'stage' does not exist on pipeline '%s', "+ "it is being referred to from pipeline 'remote-downstream' (url at repo1_r1)]" + System.lineSeparator() + "Merged config update operation failed using fallback LAST KNOWN 2 partials. "+ "Exception message was: 1+ errors :: Stage with name 'upstream_stage_renamed' does not exist on pipeline "+ "'%s', it is being referred to from pipeline 'remote-downstream' (url at repo1_r2);; ]. "+ "Please correct and resubmit.",pipelineConfig.name(),pipelineConfig.name(),pipelineConfig.name())));
  currentConfig=goConfigService.getCurrentConfig();
  assertThat(currentConfig.getAllPipelineNames().contains(remoteDownstreamPipeline.name()),is(true));
  assertThat(((RepoConfigOrigin)currentConfig.getPipelineConfigByName(remoteDownstreamPipeline.name()).getOrigin()).getRevision(),is("repo1_r1"));
  assertThat(((RepoConfigOrigin)cachedGoPartials.getValid(repoConfig1.getMaterialConfig().getFingerprint()).getOrigin()).getRevision(),is("repo1_r1"));
  assertThat(((RepoConfigOrigin)cachedGoPartials.getKnown(repoConfig1.getMaterialConfig().getFingerprint()).getOrigin()).getRevision(),is("repo1_r2"));
  assertThat(currentConfig.getPipelineConfigByName(remoteDownstreamPipeline.name()).materialConfigs().findDependencyMaterial(pipelineConfig.name()).getStageName(),is(new CaseInsensitiveString("stage")));
  assertThat(currentConfig.getPipelineConfigByName(pipelineConfig.name()).getFirstStageConfig().name(),is(new CaseInsensitiveString("stage")));
  assertThat(((RepoConfigOrigin)currentConfig.getPipelineConfigByName(remoteDownstreamPipeline.name()).getOrigin()).getRevision(),is("repo1_r1"));
  assertThat(((RepoConfigOrigin)cachedGoPartials.lastValidPartials().get(0).getOrigin()).getRevision(),is("repo1_r1"));
  assertThat(((RepoConfigOrigin)cachedGoPartials.lastKnownPartials().get(0).getOrigin()).getRevision(),is("repo1_r2"));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1)).size(),is(1));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1)).get(0).getMessage(),is("Invalid Merged Configuration"));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig1)).get(0).getDescription(),is(String.format("1+ errors :: Stage with name 'upstream_stage_renamed' does not exist on pipeline '%s', it is being referred to from pipeline 'remote-downstream' (url at repo1_r2);;  -  Config-Repo: url at repo1_r2",pipelineConfig.name())));
  assertThat(serverHealthService.filterByScope(HealthStateScope.forPartialConfigRepo(repoConfig2)).isEmpty(),is(true));
}
