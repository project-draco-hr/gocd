{
  PipelineConfig p1=createPipelineConfig("p1","s1","j1");
  PipelineConfig p2=createPipelineConfig("p2","s2","j1");
  p2.addMaterialConfig(new DependencyMaterialConfig(new CaseInsensitiveString("p1"),new CaseInsensitiveString("s1")));
  PipelineConfig p3=createPipelineConfig("p3","s3","j1");
  p3.addMaterialConfig(new DependencyMaterialConfig(new CaseInsensitiveString("p2"),new CaseInsensitiveString("s2")));
  p1.addMaterialConfig(new DependencyMaterialConfig(new CaseInsensitiveString("p3"),new CaseInsensitiveString("s3")));
  pipelines.addAll(Arrays.asList(p1,p2,p3));
  BasicCruiseConfig mainCruiseConfig=new BasicCruiseConfig(pipelines);
  ConfigReposConfig reposConfig=new ConfigReposConfig();
  GitMaterialConfig configRepo=new GitMaterialConfig("http://git");
  reposConfig.add(new ConfigRepoConfig(configRepo,"myplug"));
  mainCruiseConfig.setConfigRepos(reposConfig);
  PartialConfig partialConfig=PartialConfigMother.withPipeline("pipe2");
  cruiseConfig=new BasicCruiseConfig(mainCruiseConfig,partialConfig);
  cruiseConfig.validate(mock(ValidationContext.class));
  List<ConfigErrors> allErrors=cruiseConfig.getAllErrors();
  assertThat((allErrors.get(0).on("base")),is("Circular dependency: p1 <- p2 <- p3 <- p1"));
}
