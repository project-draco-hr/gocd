{
  GoPlugginOSGiFrameworkStub frameworkStub=new GoPlugginOSGiFrameworkStub();
  PluginManager pluginManager=new DefaultPluginManager(monitor,registry,frameworkStub,jarChangeListener,systemEnvironment);
  Action action=mock(Action.class);
  String pluginId1="test-plugin-id-1";
  String pluginId2="test-plugin-id-2";
  GoPluginDescriptor descriptor1=mock(GoPluginDescriptor.class);
  when(descriptor1.id()).thenReturn(pluginId1);
  GoPluginDescriptor descriptor2=mock(GoPluginDescriptor.class);
  when(descriptor2.id()).thenReturn(pluginId2);
  final int[] pluginLoaded=new int[]{0};
  final int[] pluginUnloaded=new int[]{0};
  PluginChangeListener someInterfaceListener=new PluginChangeListener(){
    @Override public void pluginLoaded(    GoPluginDescriptor pluginDescriptor){
      pluginLoaded[0]++;
    }
    @Override public void pluginUnLoaded(    GoPluginDescriptor pluginDescriptor){
      pluginUnloaded[0]++;
    }
  }
;
  pluginManager.addPluginChangeListener(someInterfaceListener,SomeInterface.class,SomeOtherInterface.class);
  frameworkStub.addHasReferenceFor(SomeInterface.class,pluginId1,true);
  frameworkStub.addHasReferenceFor(SomeOtherInterface.class,pluginId1,false);
  frameworkStub.addHasReferenceFor(SomeInterface.class,pluginId2,false);
  frameworkStub.addHasReferenceFor(SomeOtherInterface.class,pluginId2,true);
  assertThat(frameworkStub.pluginChangeListener == null,is(false));
  frameworkStub.pluginChangeListener.pluginLoaded(descriptor1);
  frameworkStub.pluginChangeListener.pluginLoaded(descriptor2);
  frameworkStub.pluginChangeListener.pluginUnLoaded(descriptor1);
  frameworkStub.pluginChangeListener.pluginUnLoaded(descriptor2);
  assertThat(pluginLoaded[0],is(2));
  assertThat(pluginUnloaded[0],is(2));
}
