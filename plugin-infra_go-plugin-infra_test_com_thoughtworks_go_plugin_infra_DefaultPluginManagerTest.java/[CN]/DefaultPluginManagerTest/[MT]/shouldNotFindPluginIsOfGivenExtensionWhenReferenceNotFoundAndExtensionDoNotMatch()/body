{
  final String pluginThatDoesNotImplement="plugin-that-does-not-implement";
  GoPluginIdentifier pluginIdentifier=new GoPluginIdentifier("another-extension-type",asList("1.0"));
  final GoPlugin goPlugin=mock(GoPlugin.class);
  final GoPluginDescriptor descriptor=mock(GoPluginDescriptor.class);
  when(goPluginOSGiFramework.hasReferenceFor(GoPlugin.class,pluginThatDoesNotImplement)).thenReturn(true);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ActionWithReturn<GoPlugin,GoPluginApiResponse> action=(ActionWithReturn<GoPlugin,GoPluginApiResponse>)invocationOnMock.getArguments()[2];
      return action.execute(goPlugin,descriptor);
    }
  }
).when(goPluginOSGiFramework).doOn(eq(GoPlugin.class),eq(pluginThatDoesNotImplement),any(ActionWithReturn.class));
  when(goPlugin.pluginIdentifier()).thenReturn(pluginIdentifier);
  DefaultPluginManager pluginManager=new DefaultPluginManager(monitor,registry,goPluginOSGiFramework,jarChangeListener,pluginRequestProcessorRegistry,pluginWriter,pluginValidator,systemEnvironment,pluginsZipUpdater,pluginsListListener);
  assertFalse(pluginManager.isPluginOfType("extension-type",pluginThatDoesNotImplement));
  verify(goPluginOSGiFramework).doOn(eq(GoPlugin.class),eq(pluginThatDoesNotImplement),any(ActionWithReturn.class));
}
