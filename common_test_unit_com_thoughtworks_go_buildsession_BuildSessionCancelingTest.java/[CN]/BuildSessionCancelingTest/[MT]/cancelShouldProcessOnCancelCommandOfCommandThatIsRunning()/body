{
  final BuildSession buildSession=newBuildSession();
  Thread buildingThread=new Thread(new Runnable(){
    @Override public void run(){
      buildSession.build(compose(compose(execSleepScript(50).setOnCancel(echo("exec canceled")),echo("after sleep")).setOnCancel(echo("inner oncancel"))).setOnCancel(echo("outter oncancel")));
    }
  }
);
  buildingThread.start();
  waitUntilSubProcessExists(execSleepScriptProcessCommand(),true);
  assertTrue(buildInfo(),buildSession.cancel(30,TimeUnit.SECONDS));
  waitUntilSubProcessExists(execSleepScriptProcessCommand(),false);
  JavaSysMon javaSysMon=new JavaSysMon();
  final boolean[] exists={false};
  javaSysMon.visitProcessTree(javaSysMon.currentPid(),new ProcessVisitor(){
    @Override public boolean visit(    OsProcess osProcess,    int i){
      String command=osProcess.processInfo().getName();
      if (execSleepScriptProcessCommand().equals(command)) {
        exists[0]=true;
      }
      return false;
    }
  }
);
  assertThat(exists[0],is(false));
  assertThat(buildInfo(),getLast(statusReporter.results()),is(Cancelled));
  assertThat(buildInfo(),console.output(),not(containsString("after sleep")));
  assertThat(buildInfo(),console.output(),containsString("exec canceled"));
  assertThat(buildInfo(),console.output(),containsString("inner oncancel"));
  assertThat(buildInfo(),console.output(),containsString("outter oncancel"));
  buildingThread.join();
}
