{
  String revision;
  List<Modification> newChanges;
  if (list.isEmpty()) {
    newChanges=materialChecker.findLatestModification(folder,material,subprocessExecutionContext);
    revision=newChanges.get(newChanges.size() - 1).getRevision();
  }
 else {
    Revision lastRevision=list.latestRevision(material);
    newChanges=materialService.modificationsSince(material,folder,lastRevision,subprocessExecutionContext);
    revision=lastRevision.getRevision();
  }
  if (newChanges.isEmpty()) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(String.format("[Material Update] Did not find any new modifications for material '%s' with flyweight '%s' using working directory '%s'",material,material.getFingerprint(),folder.getAbsolutePath()));
    }
  }
 else {
    LOGGER.info(String.format("[Material Update] Found '%s' modifications for material '%s' with flyweight '%s' using working directory '%s'",newChanges.size(),material,material.getFingerprint(),folder.getAbsolutePath()));
    revision=newChanges.get(newChanges.size() - 1).getRevision();
  }
  materialRepository.saveModifications(materialInstance,newChanges);
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(String.format("[Material Update] Passing checkout directory '%s' for further use '%s' with flyweight '%s' ",folder.getAbsolutePath(),material,material.getFingerprint()));
  }
  this.scmMaterialCheckoutService.onCheckoutComplete(material,newChanges,folder,revision);
}
