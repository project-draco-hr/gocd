{
  GitMaterialInstance materialInstance=new GitMaterialInstance("url","branch","submodule","flyweight");
  List<PipelineIdentifier> results=Arrays.asList(new PipelineIdentifier("p1",1));
  String cacheKey=pipelineDao.cacheKeyForPipelineInstancesTriggeredWithDependencyMaterial("p1",materialInstance.getFingerprint(),"r1");
  when(mockTemplate.queryForList(eq("pipelineInstancesTriggeredOffOfMaterialRevision"),anyString())).thenReturn(results);
  assertThat(goCache.get(cacheKey),is(Matchers.nullValue()));
  List<PipelineIdentifier> actual=pipelineDao.getPipelineInstancesTriggeredWithDependencyMaterial("p1",materialInstance,"r1");
  pipelineDao.getPipelineInstancesTriggeredWithDependencyMaterial("p1".toUpperCase(),materialInstance,"r1");
  assertThat((List<PipelineIdentifier>)goCache.get(cacheKey),is(actual));
  verify(mockTemplate,times(1)).queryForList(eq("pipelineInstancesTriggeredOffOfMaterialRevision"),anyString());
}
