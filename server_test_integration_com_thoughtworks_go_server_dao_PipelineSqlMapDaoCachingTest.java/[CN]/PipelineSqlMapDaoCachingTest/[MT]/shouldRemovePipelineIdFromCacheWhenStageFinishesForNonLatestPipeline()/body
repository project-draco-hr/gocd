{
  final String pipelineName="pipeline";
  CruiseConfig mockCruiseConfig=mock(BasicCruiseConfig.class);
  GoConfigDao mockconfigFileDao=mock(GoConfigDao.class);
  when(mockconfigFileDao.load()).thenReturn(mockCruiseConfig);
  when(mockCruiseConfig.getAllPipelineNames()).thenReturn(Arrays.asList(new CaseInsensitiveString(pipelineName)));
  pipelineDao=new PipelineSqlMapDao(null,repository,goCache,environmentVariableDao,transactionTemplate,null,transactionSynchronizationManager,systemEnvironment,mockconfigFileDao,databaseStrategy);
  pipelineDao.setSqlMapClientTemplate(mockTemplate);
  PipelineInstanceModel first=model(1,JobState.Building,JobResult.Unknown);
  PipelineInstanceModel second=model(2,JobState.Building,JobResult.Unknown);
  PipelineInstanceModels pims=PipelineInstanceModels.createPipelineInstanceModels(first,second);
  when(mockTemplate.queryForList("allActivePipelines")).thenReturn(pims);
  when(mockTemplate.queryForObject("getPipelineHistoryById",arguments("id",1L).asMap())).thenReturn(first);
  when(mockTemplate.queryForObject("getPipelineHistoryById",arguments("id",2L).asMap())).thenReturn(second);
  pipelineDao.loadActivePipelines();
  Stage stage=new Stage("first",new JobInstances(JobInstanceMother.assigned("job")),"me","whatever",new TimeProvider());
  stage.fail();
  stage.calculateResult();
  changeStageStatus(stage,1);
  stage.setPipelineId(2l);
  pipelineDao.stageStatusChanged(stage);
  PipelineInstanceModels models=pipelineDao.loadActivePipelines();
  assertThat(models.size(),is(1));
  assertThat(models.get(0).getId(),is(2L));
}
