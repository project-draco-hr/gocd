{
  PluggableSCMMaterial pluggableSCMMaterial=MaterialsMother.pluggableSCMMaterial();
  pluggableSCMMaterial.setFolder("destination-folder");
  Modification modification=ModificationsMother.oneModifiedFile("r1");
  Map<String,String> additionalData=new HashMap<String,String>();
  additionalData.put("a1","v1");
  additionalData.put("a2","v2");
  modification.setAdditionalData(new Gson().toJson(additionalData));
  MaterialRevision revision=new MaterialRevision(pluggableSCMMaterial,modification);
  PluggableSCMMaterialAgent pluggableSCMMaterialAgent=new PluggableSCMMaterialAgent(scmExtension,revision,new File("/tmp/pipelines/pipeline"));
  when(scmExtension.checkout(eq("pluginid"),scmConfiguration.capture(),eq("/tmp/pipelines/pipeline/destination-folder"),scmRevision.capture())).thenReturn(new Result());
  pluggableSCMMaterialAgent.prepare();
  verify(scmExtension).checkout(any(String.class),any(SCMPropertyConfiguration.class),any(String.class),any(SCMRevision.class));
  assertThat(scmConfiguration.getValue().size(),is(2));
  assertThat(scmConfiguration.getValue().get("k1").getValue(),is("v1"));
  assertThat(scmConfiguration.getValue().get("k2").getValue(),is("v2"));
  assertThat(scmRevision.getValue().getRevision(),is("r1"));
  assertThat(scmRevision.getValue().getTimestamp(),is(modification.getModifiedTime()));
  assertThat(scmRevision.getValue().getData().size(),is(2));
  assertThat(scmRevision.getValue().getDataFor("a1"),is("v1"));
  assertThat(scmRevision.getValue().getDataFor("a2"),is("v2"));
}
