{
  ScheduleTestUtil u=new ScheduleTestUtil(transactionTemplate,materialRepository,dbHelper,configHelper);
  int i=1;
  GitMaterial git1=u.wf(new GitMaterial("git"),"folder1");
  u.checkinInOrder(git1,"g1");
  GitMaterial git2=u.wf(new GitMaterial("git"),"folder2");
  ScheduleTestUtil.AddedPipeline p=u.saveConfigWith("P",u.m(git1),u.m(git2));
  CruiseConfig cruiseConfig=goConfigDao.load();
  u.checkinInOrder(git1,u.d(i++),"g2");
  u.runAndPass(p,"g1","g2");
  u.runAndPass(p,"g2","g1");
  PipelineTimeline timeline=new PipelineTimeline(pipelineRepository,transactionTemplate,transactionSynchronizationManager);
  timeline.updateTimelineOnInit();
  List<PipelineTimelineEntry> timelineEntries=new ArrayList<PipelineTimelineEntry>(timeline.getEntriesFor("P"));
  assertThat(timelineEntries.get(0).getPipelineLocator().getCounter(),is(1));
  assertThat(timelineEntries.get(0).naturalOrder(),is(1.0));
  List<PipelineTimelineEntry.Revision> flyweightsRevs=new ArrayList<List<PipelineTimelineEntry.Revision>>(timelineEntries.get(0).revisions().values()).get(0);
  assertThat(flyweightsRevs.get(0).revision,is("g1"));
  assertThat(flyweightsRevs.get(1).revision,is("g2"));
  assertThat(timelineEntries.get(1).getPipelineLocator().getCounter(),is(2));
  assertThat(timelineEntries.get(1).naturalOrder(),is(2.0));
  flyweightsRevs=new ArrayList<List<PipelineTimelineEntry.Revision>>(timelineEntries.get(1).revisions().values()).get(0);
  assertThat(flyweightsRevs.get(0).revision,is("g2"));
  assertThat(flyweightsRevs.get(1).revision,is("g1"));
  MaterialConfigs materials=CLONER.deepClone(p.config.materialConfigs());
  Collections.reverse(materials);
  configHelper.setMaterialConfigForPipeline("P",materials.toArray(new MaterialConfig[0]));
  goConfigDao.load();
  timeline=new PipelineTimeline(pipelineRepository,transactionTemplate,transactionSynchronizationManager);
  timeline.updateTimelineOnInit();
  timelineEntries=new ArrayList<PipelineTimelineEntry>(timeline.getEntriesFor("P"));
  assertThat(timelineEntries.get(0).getPipelineLocator().getCounter(),is(1));
  assertThat(timelineEntries.get(0).naturalOrder(),is(1.0));
  flyweightsRevs=new ArrayList<List<PipelineTimelineEntry.Revision>>(timelineEntries.get(0).revisions().values()).get(0);
  assertThat(flyweightsRevs.get(0).revision,is("g1"));
  assertThat(flyweightsRevs.get(1).revision,is("g2"));
  assertThat(timelineEntries.get(1).getPipelineLocator().getCounter(),is(2));
  assertThat(timelineEntries.get(1).naturalOrder(),is(2.0));
  flyweightsRevs=new ArrayList<List<PipelineTimelineEntry.Revision>>(timelineEntries.get(1).revisions().values()).get(0);
  assertThat(flyweightsRevs.get(0).revision,is("g2"));
  assertThat(flyweightsRevs.get(1).revision,is("g1"));
}
