{
  return new TypeSafeMatcher<HttpRequestBase>(){
    @Override public boolean matchesSafely(    HttpRequestBase item){
      try {
        HttpEntityEnclosingRequestBase postMethod=(HttpEntityEnclosingRequestBase)item;
        List<NameValuePair> params=URLEncodedUtils.parse(postMethod.getEntity());
        assertThat(getParameter(params,"hostname"),is("cruise.com"));
        assertThat(getParameter(params,"uuid"),is(uuid));
        String workingDir=SystemUtil.currentWorkingDirectory();
        assertThat(getParameter(params,"location"),is(workingDir));
        assertThat(getParameter(params,"operatingSystem"),is("minix"));
        assertThat(getParameter(params,"agentAutoRegisterKey"),is("t0ps3cret"));
        assertThat(getParameter(params,"agentAutoRegisterResources"),is("linux, java"));
        assertThat(getParameter(params,"agentAutoRegisterEnvironments"),is("uat, staging"));
        assertThat(getParameter(params,"agentAutoRegisterHostname"),is("agent01.example.com"));
        assertThat(getParameter(params,"elasticAgentId"),is(elasticAgentId));
        assertThat(getParameter(params,"elasticPluginId"),is(elasticPluginId));
        return true;
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    private String getParameter(    List<NameValuePair> params,    String paramName){
      for (      NameValuePair param : params) {
        if (param.getName().equals(paramName)) {
          return param.getValue();
        }
      }
      return null;
    }
    public void describeTo(    Description description){
      description.appendText("params containing");
    }
  }
;
}
