{
  PipelineConfig upstreamPipeline=configHelper.addPipeline("upstream","stage",git.config(),"job");
  DependencyMaterial dependencyMaterial=MaterialsMother.dependencyMaterial("upstream","stage");
  pipelineConfigWithTwoMaterials.addMaterialConfig(dependencyMaterial.config());
  pipelineConfigWithTwoMaterials.removeMaterialConfig(git.config());
  Username username=new Username(new CaseInsensitiveString("user1"));
  List<MaterialRevision> revisionsForUpstream1=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForUpstream1,git);
  Pipeline upstreamOne=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),upstreamPipeline,revisionsForUpstream1);
  List<MaterialRevision> revisionsForDownstream1=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForDownstream1,hg);
  dbHelper.addDependencyRevisionModification(revisionsForDownstream1,dependencyMaterial,upstreamOne);
  Pipeline downstreamOne=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),pipelineConfigWithTwoMaterials,revisionsForDownstream1);
  List<MaterialRevision> revisionsForUpstream2=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForUpstream2,git);
  Pipeline upstreamTwo=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),upstreamPipeline,revisionsForUpstream2);
  List<MaterialRevision> revisionsForDownstream2=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForDownstream2,hg);
  dbHelper.addDependencyRevisionModification(revisionsForDownstream2,dependencyMaterial,upstreamTwo);
  Pipeline downstreamTwo=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),pipelineConfigWithTwoMaterials,revisionsForDownstream2);
  List<MaterialRevision> revisionsForUpstream3=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForUpstream3,git);
  Pipeline upstreamThree=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),upstreamPipeline,revisionsForUpstream3);
  List<MaterialRevision> revisionsForUpstream4=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForUpstream4,git);
  Pipeline upstreamFour=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),upstreamPipeline,revisionsForUpstream4);
  List<MaterialRevision> revisionsForUpstream5=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForUpstream5,git);
  Pipeline upstreamFive=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),upstreamPipeline,revisionsForUpstream5);
  List<MaterialRevision> revisionsForDownstream3=new ArrayList<MaterialRevision>();
  addRevisionWith2Mods(revisionsForDownstream3,hg);
  dbHelper.addDependencyRevisionModification(revisionsForDownstream3,dependencyMaterial,upstreamFive);
  Pipeline downstreamThree=dbHelper.checkinRevisionsToBuild(new ManualBuild(username),pipelineConfigWithTwoMaterials,revisionsForDownstream3);
  HttpLocalizedOperationResult result=new HttpLocalizedOperationResult();
  List<MaterialRevision> actual=changesetService.revisionsBetween(CaseInsensitiveString.str(pipelineConfigWithTwoMaterials.name()),downstreamOne.getCounter(),downstreamThree.getCounter(),username,result,true,false);
  List<MaterialRevision> expectedRevisions=groupByMaterial(revisionsForUpstream2,revisionsForUpstream3,revisionsForUpstream4,revisionsForUpstream5,revisionsForDownstream2,revisionsForDownstream3);
  assertMaterialRevisions(expectedRevisions,actual);
  assertThat(result.isSuccessful(),is(true));
}
