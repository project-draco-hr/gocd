{
  PipelineConfig mingleConfig=PipelineConfigMother.createPipelineConfig("mingle","build","unit","functional");
  Pipeline pipeline=PipelineMother.passedPipelineInstance("mingle","build","unit");
  Stage firstStage=pipeline.getFirstStage();
  stub(mingleConfig,pipeline,firstStage);
  schedulingChecker=mock(SchedulingCheckerService.class);
  doThrow(new NullPointerException("The whole world is a big null.")).when(schedulingChecker).canSchedule(any(OperationResult.class));
  service=new ScheduleService(goConfigService,pipelineService,stageService,schedulingChecker,mock(PipelineScheduledTopic.class),mock(PipelineDao.class),mock(StageDao.class),mock(StageOrderService.class),securityService,pipelineScheduleQueue,jobInstanceService,mock(JobInstanceDao.class),mock(AgentAssignment.class),environmentConfigService,lockService,serverHealthService,txnTemplate,mock(AgentService.class),null,null,null,null,null,schedulingPerformanceLogger,null);
  HttpOperationResult result=new HttpOperationResult();
  LogFixture logFixture=LogFixture.startListening();
  Stage stage=service.rerunJobs(firstStage,a("unit"),result);
  assertThat(logFixture.contains(Level.ERROR,"Job rerun request for job(s) [unit] could not be completed because of unexpected failure. Cause: The whole world is a big null."),is(true));
  logFixture.stopListening();
  assertThat(stage,is(nullValue()));
  assertThat(result.httpCode(),is(400));
  assertThat(result.message(),is("Job rerun request for job(s) [unit] could not be completed because of unexpected failure. Cause: The whole world is a big null."));
}
