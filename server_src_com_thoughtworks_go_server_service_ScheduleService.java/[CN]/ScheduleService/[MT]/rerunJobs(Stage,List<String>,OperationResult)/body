{
  final StageIdentifier identifier=stage.getIdentifier();
  if (jobNames == null || jobNames.isEmpty()) {
    String message="No job was selected to re-run.";
    result.badRequest(message,message,HealthStateType.general(HealthStateScope.forStage(identifier.getPipelineName(),identifier.getStageName())));
    return null;
  }
  try {
    return lockAndRerunStage(identifier.getPipelineName(),String.valueOf(identifier.getPipelineCounter()),identifier.getStageName(),new StageInstanceCreator(){
      public Stage create(      String pipelineName,      String stageName,      SchedulingContext context){
        StageConfig stageConfig=goConfigService.stageConfigNamed(identifier.getPipelineName(),identifier.getStageName());
        String latestMd5=goConfigService.getCurrentConfig().getMd5();
        try {
          return instanceFactory.createStageForRerunOfJobs(stage,jobNames,context,stageConfig,timeProvider,latestMd5);
        }
 catch (        CannotRerunJobException e) {
          result.notFound(e.getMessage(),e.getMessage(),HealthStateType.general(HealthStateScope.forStage(identifier.getPipelineName(),identifier.getStageName())));
          throw e;
        }
      }
    }
,new ResultUpdatingErrorHandler(result));
  }
 catch (  RuntimeException e) {
    if (result.canContinue()) {
      String message=String.format("Job rerun request for job(s) [%s] could not be completed because of unexpected failure. Cause: %s",StringUtils.join(jobNames.toArray(),", "),e.getMessage());
      LOGGER.error(message,e);
      result.badRequest(message,message,HealthStateType.general(HealthStateScope.forStage(identifier.getPipelineName(),identifier.getStageName())));
    }
    return null;
  }
}
