{
  String expectedErrorMessage="Cannot save package or repo, found duplicate packages. [Repo Name: 'repo-repo1', Package Name: 'pkg1'], [Repo Name: 'repo-repo1', Package Name: 'pkg3']";
  PackageRepository repository=PackageRepositoryMother.create("repo1");
  PackageDefinition definition1=PackageDefinitionMother.create("1","pkg1",new Configuration(new ConfigurationProperty(new ConfigurationKey("k1"),new ConfigurationValue("v1"))),repository);
  PackageDefinition definition2=PackageDefinitionMother.create("2","pkg2",new Configuration(new ConfigurationProperty(new ConfigurationKey("k2"),new ConfigurationValue("v2"))),repository);
  PackageDefinition definition3=PackageDefinitionMother.create("3","pkg3",new Configuration(new ConfigurationProperty(new ConfigurationKey("k1"),new ConfigurationValue("v1"))),repository);
  HashMap<String,Packages> map=new HashMap<String,Packages>();
  map.put(definition1.getFingerprint(AbstractMaterialConfig.FINGERPRINT_DELIMITER),new Packages(definition1,definition3));
  map.put(definition2.getFingerprint(AbstractMaterialConfig.FINGERPRINT_DELIMITER),new Packages(definition2));
  definition1.validateFingerprintUniqueness(map);
  definition2.validateFingerprintUniqueness(map);
  definition3.validateFingerprintUniqueness(map);
  assertThat(definition1.errors().getAllOn(PackageDefinition.ID),is(asList(expectedErrorMessage)));
  assertThat(definition3.errors().getAllOn(PackageDefinition.ID),is(asList(expectedErrorMessage)));
  assertThat(definition2.errors().getAllOn(PackageDefinition.ID),is(nullValue()));
}
